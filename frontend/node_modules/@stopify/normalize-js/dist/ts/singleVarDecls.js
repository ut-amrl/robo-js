"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const babel = require("babel-core");
const t = require("babel-types");
const hygiene_1 = require("@stopify/hygiene");
function getFunctionArgs(path) {
    const node = path.node;
    if (node.type === 'FunctionDeclaration' ||
        node.type === 'FunctionExpression') {
        return node.params.map((x) => x.name);
    }
    else {
        return [];
    }
}
const visitFunWithBody = {
    enter(path) {
        this.functionParentStack.push(this.functionParent);
        this.functionParent = path;
    },
    exit(path) {
        this.functionParent = this.functionParentStack.pop();
    }
};
const visitor = {
    Program(path) {
        this.renameStack = [];
        this.functionParent = path;
        this.functionParentStack = [];
    },
    FunctionExpression: visitFunWithBody,
    FunctionDeclaration: visitFunWithBody,
    ObjectMethod: visitFunWithBody,
    ArrowFunctionExpression(path) {
        throw new Error("ArrowFunctionExpressions are unsupported");
    },
    Scope: {
        enter(path) {
            path.node.renames = {};
            this.renameStack.push(path.node.renames);
        },
        exit(path) {
            this.renameStack.pop();
        },
    },
    VariableDeclaration: {
        enter(path) {
            if (path.node.declarations.length !== 1) {
                return;
            }
            const decl = path.node.declarations[0];
            const id = decl.id;
            if (id.type !== 'Identifier') {
                throw new Error(`destructuring is not supported`);
            }
            // This checks for the following case:
            //
            //   function(x) { var x = 10; }
            //
            // is the same as:
            //
            //   function(x) { x = 10; }
            //
            // Therefore, we do not need to lift x. Instead, we eliminate the
            // declaration and only turn it into an assignment.
            if (path.node.kind === 'var') {
                const funArgs = getFunctionArgs(this.functionParent);
                if (funArgs.includes(id.name)) {
                    if (decl.init === null) {
                        // Case "function (x) { var x; }", we can remove "var x";
                        path.remove();
                    }
                    else {
                        // Case "function(x) { var x = 10; }", we turn the declaration
                        // into "x = 10" and lift the declaration to the top of the
                        // enclosing function (or program).
                        path.replaceWith(t.assignmentExpression('=', id, decl.init));
                    }
                }
            }
            else {
                // This is a 'const x = ...' or a 'let x = ...' declaration that needs
                // to be eliminated. Babel's 'transform-es2015-block-scoping' plugin is
                // too slow for our purposes. Instead, we do something dumber: we use
                // 'fastFreshId' to rename these variables (even if renaming is
                // unnecessary) and declare them as 'var' statements.
                const decl = path.node.declarations[0];
                const x = hygiene_1.fresh(id.name);
                const oldId = id.name, newId = x.name;
                // NOTE(arjun): using rename is likely quadratic. If we have performance
                // issues with this phase, we can maintain a set of renamed variables
                // and avoid repeated traversals.
                path.scope.rename(id.name, x.name);
                path.replaceWith(t.variableDeclaration('var', [decl]));
                this.renameStack[this.renameStack.length - 1][oldId] = newId;
            }
        },
        exit(path) {
            if (path.node.declarations.length > 1) {
                let l = path.node.declarations.map(d => t.variableDeclaration(path.node.kind, [d]));
                path.replaceWithMultiple(l);
            }
        }
    },
};
module.exports = function () {
    return { visitor };
};
function main() {
    const filename = process.argv[2];
    const opts = {
        plugins: [() => ({ visitor })],
        babelrc: false
    };
    babel.transformFile(filename, opts, (err, result) => {
        if (err !== null) {
            throw err;
        }
        console.log(result.code);
    });
}
if (require.main === module) {
    main();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlVmFyRGVjbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90cy9zaW5nbGVWYXJEZWNscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9DQUFvQztBQUVwQyxpQ0FBaUM7QUFFakMsOENBQXlDO0FBRXpDLFNBQVMsZUFBZSxDQUFDLElBQXNCO0lBQzdDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDdkIsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLHFCQUFxQjtRQUNuQyxJQUFJLENBQUMsSUFBSSxLQUFLLG9CQUFvQixFQUFFO1FBQ3RDLE9BQWEsSUFBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM1RDtTQUNJO1FBQ0gsT0FBTyxFQUFFLENBQUM7S0FDWDtBQUNILENBQUM7QUFRRCxNQUFNLGdCQUFnQixHQUFHO0lBQ3ZCLEtBQUssQ0FBVSxJQUE4QjtRQUMzQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztJQUM3QixDQUFDO0lBQ0QsSUFBSSxDQUFVLElBQThCO1FBQzFDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRyxDQUFDO0lBQ3hELENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQUc7SUFDZCxPQUFPLENBQVUsSUFBeUI7UUFDeEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBQ0Qsa0JBQWtCLEVBQUUsZ0JBQWdCO0lBQ3BDLG1CQUFtQixF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