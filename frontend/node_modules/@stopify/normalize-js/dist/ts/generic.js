"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function sum(arr) {
    return arr.reduce((x, y) => x + y, 0);
}
exports.sum = sum;
function dropWhile(f, arr) {
    for (let i = 0; i < arr.length; i++) {
        if (f(arr[i]) === false) {
            return arr.slice(i);
        }
    }
    return [];
}
exports.dropWhile = dropWhile;
function takeWhile(f, arr) {
    for (let i = 0; i < arr.length; i++) {
        if (f(arr[i]) === false) {
            return arr.slice(0, i);
        }
    }
    return arr.slice(0);
}
exports.takeWhile = takeWhile;
function timeSlow(label, thunk) {
    const start = Date.now();
    const result = thunk();
    const end = Date.now();
    const delay = end - start;
    if (delay > 2000) {
        console.info(`${label} (${delay} ms)`);
    }
    return result;
}
exports.timeSlow = timeSlow;
function groupBy(inGroup, arr) {
    if (arr.length === 0) {
        return [];
    }
    const groups = [[arr[0]]];
    let currentGroup = groups[0];
    let last = arr[0];
    for (let i = 1; i < arr.length; i++) {
        const current = arr[i];
        if (inGroup(last, current)) {
            currentGroup.push(current);
            last = current;
        }
        else {
            currentGroup = [current];
            groups.push(currentGroup);
            last = current;
        }
    }
    return groups;
}
exports.groupBy = groupBy;
function parseArg(convert, validate, error) {
    return (arg) => {
        const parsed = convert(arg);
        if (validate(parsed)) {
            return parsed;
        }
        else {
            throw new Error(error);
        }
    };
}
exports.parseArg = parseArg;
function unreachable() {
    throw new Error("unreachable code was reached!");
}
exports.unreachable = unreachable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL2dlbmVyaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFnQixHQUFHLENBQUMsR0FBYTtJQUMvQixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFGRCxrQkFFQztBQUVELFNBQWdCLFNBQVMsQ0FBSSxDQUFzQixFQUFFLEdBQVE7SUFDM0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbkMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxFQUFFO1lBQ3ZCLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyQjtLQUNGO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDO0FBUEQsOEJBT0M7QUFFRCxTQUFnQixTQUFTLENBQUksQ0FBc0IsRUFBRSxHQUFRO0lBQzNELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ25DLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBRTtZQUN2QixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3hCO0tBQ0Y7SUFDRCxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsQ0FBQztBQVBELDhCQU9DO0FBRUQsU0FBZ0IsUUFBUSxDQUFJLEtBQWEsRUFBRSxLQUFjO0lBQ3ZELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN6QixNQUFNLE1BQU0sR0FBRyxLQUFLLEVBQUUsQ0FBQztJQUN2QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDdkIsTUFBTSxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQztJQUMxQixJQUFJLEtBQUssR0FBRyxJQUFJLEVBQUU7UUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDO0tBQ3hDO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQVRELDRCQVNDO0FBRUQsU0FBZ0IsT0FBTyxDQUFJLE9BQWdDLEVBQUUsR0FBUTtJQUNuRSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3BCLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFFRCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ25DLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUU7WUFDMUIsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMzQixJQUFJLEdBQUcsT0FBTyxDQUFDO1NBQ2hCO2FBQ0k7WUFDSCxZQUFZLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLElBQUksR0FBRyxPQUFPLENBQUM7U0FDaEI7S0FDRjtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFyQkQsMEJBcUJDO0FBRUQsU0FBZ0IsUUFBUSxDQUN0QixPQUEyQixFQUMzQixRQUFnQyxFQUNoQyxLQUFhO0lBQ2IsT0FBTyxDQUFDLEdBQVEsRUFBRSxFQUFFO1FBQ2xCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNwQixPQUFPLE1BQU0sQ0FBQztTQUNmO2FBQ0k7WUFDSCxNQUFNLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQWJELDRCQWFDO0FBRUQsU0FBZ0IsV0FBVztJQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7QUFDbkQsQ0FBQztBQUZELGtDQUVDIn0=