"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const t = require("babel-types");
const util_1 = require("@stopify/util");
function ifTest(e, discriminant, fallthrough) {
    return t.logicalExpression('||', t.binaryExpression('===', discriminant, e), fallthrough);
}
function desugarCases(cases, discriminant, fallthrough) {
    if (cases.length === 0) {
        return [];
    }
    const [hd, ...tail] = cases;
    const { test, consequent } = hd;
    if (test === null) {
        return consequent;
    }
    else {
        const cond = ifTest(test, discriminant, fallthrough);
        const newTail = desugarCases(tail, discriminant, fallthrough);
        newTail.unshift(t.ifStatement(cond, t.blockStatement([
            t.expressionStatement(t.assignmentExpression('=', fallthrough, t.booleanLiteral(true))),
            ...consequent
        ])));
        return newTail;
    }
}
const switchVisitor = {
    BreakStatement: function (path) {
        const label = path.node.label;
        if (label === null) {
            const labeledParent = path.findParent(p => p.isLoop() || p.isSwitchStatement());
            if (labeledParent === null) {
                return;
            }
            path.node.label = labeledParent.node.break_label;
        }
    },
    SwitchStatement: {
        enter(path) {
            if (t.isLabeledStatement(path.parent)) {
                return;
            }
            const breakLabel = path.scope.generateUidIdentifier('switch');
            path.node = util_1.breakLbl(path.node, breakLabel);
            const labeledStatement = t.labeledStatement(breakLabel, path.node);
            path.replaceWith(labeledStatement);
        },
        exit(path) {
            const { discriminant, cases } = path.node;
            const test = path.scope.generateUidIdentifier('test');
            const fallthrough = path.scope.generateUidIdentifier('fallthrough');
            let desugared = [];
            desugared.unshift(...desugarCases(cases, test, fallthrough));
            desugared.unshift(util_1.letExpression(fallthrough, t.booleanLiteral(false)));
            desugared.unshift(util_1.letExpression(test, discriminant));
            path.replaceWith(t.blockStatement(desugared));
        }
    }
};
module.exports = function () {
    return { visitor: switchVisitor };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzdWdhclN3aXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL2Rlc3VnYXJTd2l0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFvQ0EsaUNBQWlDO0FBQ2pDLHdDQUErRDtBQUUvRCxTQUFTLE1BQU0sQ0FBQyxDQUFlLEVBQzdCLFlBQTBCLEVBQzFCLFdBQXlCO0lBQ3ZCLE9BQU8sQ0FBQyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsRUFDekUsV0FBVyxDQUFDLENBQUM7QUFDakIsQ0FBQztBQUVILFNBQVMsWUFBWSxDQUFDLEtBQXFCLEVBQ3pDLFlBQTBCLEVBQzFCLFdBQXlCO0lBQ3ZCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDdEIsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUVELE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDNUIsTUFBTSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFFaEMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1FBQ2pCLE9BQU8sVUFBVSxDQUFDO0tBQ25CO1NBQU07UUFDTCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNyRCxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM5RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUNoQyxDQUFDLENBQUMsY0FBYyxDQUFDO1lBQ2YsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUMzRCxDQUFDLENBQUMsY0FB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