"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const t = require("babel-types");
const util_1 = require("@stopify/util");
const hoisted = (t) => util_1.tag('hoisted', t, true);
function declToAssign(decl) {
    return decl.init === null ?
        t.assignmentExpression('=', decl.id, t.unaryExpression('void', t.numericLiteral(0))) :
        t.assignmentExpression('=', decl.id, decl.init);
}
const lift = {
    VariableDeclaration: function (path) {
        if (path.node.hoisted) {
            return;
        }
        const { kind, declarations } = path.node;
        if (kind === 'var') {
            const topScope = path.getFunctionParent();
            switch (topScope.node.type) {
                case 'FunctionDeclaration':
                case 'FunctionExpression': {
                    const ids = declarations.map(decl => decl.id);
                    // TODO(sbaxter): Update babel typescript declaration to type
                    // `unshiftContainer` and remove `any` cast
                    topScope.get('body').unshiftContainer('body', hoisted(t.variableDeclaration('var', ids.map(id => t.variableDeclarator(id, undefined)))));
                    const exp = declarations.length === 1 ?
                        declToAssign(declarations[0]) :
                        t.sequenceExpression(declarations.map(decl => declToAssign(decl)));
                    path.replaceWith(exp);
                    break;
                }
                case 'Program':
                    const ids = declarations.map(decl => decl.id);
                    // TODO(sbaxter): Update babel typescript declaration to type
                    // `unshiftContainer` and remove `any` cast
                    topScope.unshiftContainer('body', hoisted(t.variableDeclaration('var', ids.map(id => t.variableDeclarator(id, undefined)))));
                    const exp = declarations.length === 1 ?
                        declToAssign(declarations[0]) :
                        t.sequenceExpression(declarations.map(decl => declToAssign(decl)));
                    path.replaceWith(t.expressionStatement(exp));
                    break;
                default:
                    throw new Error(`Expected to find function/program parent, but found ${topScope.type} instead`);
            }
        }
    }
};
module.exports = function () {
    return { visitor: lift };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmdFZhci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL2xpZnRWYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFRQSxpQ0FBaUM7QUFDakMsd0NBQW9DO0FBS3BDLE1BQU0sT0FBTyxHQUFHLENBQUksQ0FBSSxFQUFFLEVBQUUsQ0FBQyxVQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUVyRCxTQUFTLFlBQVksQ0FBQyxJQUEwQjtJQUM5QyxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEYsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBRUQsTUFBTSxJQUFJLEdBQVk7SUFDcEIsbUJBQW1CLEVBQ25CLFVBQVUsSUFBOEM7UUFDdEQsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFDRCxNQUFNLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDekMsSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFO1lBQ2xCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQzFDLFFBQVEsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQzFCLEtBQUsscUJBQXFCLENBQUM7Z0JBQzNCLEtBQUssb0JBQW9CLENBQUMsQ0FBQztvQkFDekIsTUFBTSxHQUFHLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDOUMsNkRBQTZEO29CQUM3RCwyQ0FBMkM7b0JBQ3JDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFFLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUNqRCxPQUFPLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFDbkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDeEQsTUFBTSxHQUFHLEdBQUcsWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQzt3QkFDckMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUM7d0JBQzlCLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDckUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDdEIsTUFBTTtpQkFDUDtnQkFDRCxLQUFLLFNBQVM7b0JBQ1osTUFBTSxHQUFHLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDOUMsNkRBQTZEO29CQUM3RCwyQ0FBMkM7b0JBQ3JDLFFBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQ3JDLE9BQU8sQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsS0FBSyxFQUNuQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4RCxNQUFNLEdBQUcsR0FBRyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDO3dCQUNyQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQzt3QkFDOUIsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNyRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUM3QyxNQUFNO2dCQUNSO29CQUNFLE1BQU0sSUFBSSxLQUFLLENBQ2IsdURBQXVELFFBQVEsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDO2FBQ3JGO1NBQ0Y7SUFDSCxDQUFDO0NBQ0YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUc7SUFDZixPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO0FBQzNCLENBQUMsQ0FBQyJ9