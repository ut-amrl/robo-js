"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Preconditions:
 *
 * 1. The program only contains while loops
 *
 * Postconditions:
 *
 *   1. Function calls do not occur within &&-expressions, ||-expressions,
 *      ternary expressions, and  expression sequences (the comma operator).
 *   2. Function applications do not occur in a loop guard.
 */
const babel = require("babel-core");
const t = require("babel-types");
const util_1 = require("@stopify/util");
const hygiene_1 = require("@stopify/hygiene");
const bh = require("@stopify/util");
exports.visitor = {
    WhileStatement: function (path) {
        if (!util_1.containsCall(path.get('test')) && path.node.test.type !== 'CallExpression') {
            return;
        }
        const test = path.node.test;
        path.get('test').replaceWith(t.booleanLiteral(true));
        path.get('body').replaceWith(t.blockStatement([
            bh.sIf(test, path.node.body, t.breakStatement())
        ]));
    },
    LogicalExpression(path) {
        if (!util_1.containsCall(path)) {
            return;
        }
        const op = path.node.operator;
        const stmt = path.getStatementParent();
        const lhs = hygiene_1.nameExprBefore(stmt, path.node.left);
        const r = hygiene_1.fresh(op === "&&" ? "and" : "or");
        stmt.insertBefore(t.variableDeclaration("let", [t.variableDeclarator(r)]));
        const x = t.blockStatement([t.expressionStatement(t.assignmentExpression("=", r, path.node.right))]);
        const y = t.blockStatement([t.expressionStatement(t.assignmentExpression("=", r, lhs))]);
        if (op === "&&") {
            stmt.insertBefore(t.ifStatement(lhs, x, y));
        }
        else {
            stmt.insertBefore(t.ifStatement(lhs, y, x));
        }
        path.replaceWith(r);
    },
    SequenceExpression(path) {
        if (util_1.containsCall(path) === false) {
            return;
        }
        const exprs = path.node.expressions;
        if (exprs.length < 2) {
            // This probably won't happen in a parsed program.
            path.replaceWith(exprs[0]);
            return;
        }
        const last = exprs[exprs.length - 1];
        const rest = exprs.slice(0, exprs.length - 1);
        const stmt = path.getStatementParent();
        for (const expr of rest) {
            stmt.insertBefore(t.expressionStatement(expr));
        }
        path.replaceWith(last);
    },
    ConditionalExpression(path) {
        if (!util_1.containsCall(path)) {
            return;
        }
        const r = hygiene_1.fresh("cond");
        const stmt = path.getStatementParent();
        stmt.insertBefore(t.variableDeclaration("let", [t.variableDeclarator(r)]));
        const test = hygiene_1.nameExprBefore(stmt, path.node.test);
        stmt.insertBefore(t.ifStatement(test, t.blockStatement([
            t.expressionStatement(t.assignmentExpression("=", r, path.node.consequent))
        ]), t.blockStatement([
            t.expressionStatement(t.assignmentExpression("=", r, path.node.alternate))
        ])));
        path.replaceWith(r);
    }
};
function main() {
    const filename = process.argv[2];
    const opts = {
        plugins: [() => ({ visitor: exports.visitor })],
        babelrc: false
    };
    babel.transformFile(filename, opts, (err, result) => {
        if (err !== null) {
            throw err;
        }
        console.log(result.code);
    });
}
if (require.main === module) {
    main();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzdWdhckxvZ2ljYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90cy9kZXN1Z2FyTG9naWNhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7O0dBVUc7QUFDSCxvQ0FBb0M7QUFFcEMsaUNBQWlDO0FBQ2pDLHdDQUE2QztBQUM3Qyw4Q0FBeUQ7QUFDekQsb0NBQW9DO0FBRXZCLFFBQUEsT0FBTyxHQUFZO0lBQzlCLGNBQWMsRUFBRSxVQUFVLElBQWdDO1FBQ3hELElBQUksQ0FBQyxtQkFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssZ0JBQWdCLEVBQUU7WUFDL0UsT0FBTztTQUNSO1FBQ0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7WUFDNUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ2pELENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVELGlCQUFpQixDQUFDLElBQW1DO1FBQ25ELElBQUksQ0FBQyxtQkFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLE9BQU87U0FDUjtRQUVELE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzlCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFD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