"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const babel = require("babel-core");
const SetExt = require("./setExt");
const hasNff = ["FunctionDeclaration", "FunctionExpression", "Program"];
const functionTypes = ['FunctionDeclaration', 'FunctionExpression'];
const visitor = {
    Scope: {
        enter(path) {
            path.node.nestedFunctionFree = new Set();
            this.refIdStack.push(this.refIds);
            this.refIds = new Set();
        },
        exit(path) {
            const boundIds = new Set(Object.keys(path.scope.bindings));
            let freeIds = SetExt.diff(this.refIds, boundIds);
            path.node.freeIds = freeIds;
            this.refIds = this.refIdStack.pop();
            for (const x of freeIds) {
                this.refIds.add(x);
            }
            if (functionTypes.includes(path.node.type)) {
                const parent = enclosingFunction(path);
                const nestedFunctionFree = parent.node.nestedFunctionFree;
                for (const x of path.node.freeIds) {
                    nestedFunctionFree.add(x);
                }
            }
        }
    },
    ReferencedIdentifier(path) {
        const parentType = path.parent.type;
        if (parentType === "BreakStatement" ||
            parentType === 'ContinueStatement' ||
            parentType === "LabeledStatement") {
            return;
        }
        this.refIds.add(path.node.name);
    },
    BindingIdentifier(path) {
        const parentType = path.parent.type;
        if (parentType !== "AssignmentExpression") {
            return;
        }
        this.refIds.add(path.node.name);
    },
    Program(path) {
        path.node.nestedFunctionFree = new Set();
        this.refIdStack = [];
        this.refIds = new Set();
    }
};
function annotate(path) {
    const opts = {
        plugins: [[() => ({ visitor })]],
        babelrc: false,
        code: false,
        ast: false
    };
    babel.transformFromAst(path.node, undefined, opts);
}
exports.annotate = annotate;
function enclosingFunction(path) {
    const p = path.findParent(p => hasNff.includes(p.node.type));
    return p;
}
exports.enclosingFunction = enclosingFunction;
function isNestedFree(path, x) {
    return path.node.nestedFunctionFree.has(x);
}
exports.isNestedFree = isNestedFree;
function main() {
    const filename = process.argv[2];
    const opts = { plugins: [() => ({ visitor })], babelrc: false };
    babel.transformFile(filename, opts, (err, result) => {
        if (err !== null) {
            throw err;
        }
        console.log(result.code);
    });
}
if (require.main === module) {
    main();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlZUlkcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL2ZyZWVJZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFRQSxvQ0FBb0M7QUFFcEMsbUNBQW1DO0FBZW5DLE1BQU0sTUFBTSxHQUFHLENBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxDQUFFLENBQUM7QUFDMUUsTUFBTSxhQUFhLEdBQUcsQ0FBRSxxQkFBcUIsRUFBRSxvQkFBb0IsQ0FBRSxDQUFDO0FBRXRFLE1BQU0sT0FBTyxHQUFHO0lBQ2QsS0FBSyxFQUFFO1FBQ0wsS0FBSyxDQUFjLElBQStDO1lBQ2hFLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztZQUNqRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQzFCLENBQUM7UUFDRCxJQUFJLENBQWMsSUFBeUQ7WUFDekUsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQVMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkUsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFHLENBQUM7WUFDckMsS0FBSyxNQUFNLENBQUMsSUFBSSxPQUFPLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3BCO1lBRUQsSUFBSSxhQUFhLENBQUMs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