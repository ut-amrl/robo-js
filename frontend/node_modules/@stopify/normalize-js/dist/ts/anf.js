"use strict";
/**
 * Plugin to transform JS programs into ANF form.
 *
 * WARNING:
 * The plugin assumes that the assumptions stated in ./src/desugarLoop.js
 * hold. The resulting output is not guarenteed to be in ANF form if the
 * assumptions do not hold.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const t = require("babel-types");
const h = require("@stopify/util");
const hygiene_1 = require("@stopify/hygiene");
function withinTryBlock(path) {
    const funOrTryParent = path.findParent(p => p.isFunction() || p.isTryStatement());
    return t.isTryStatement(funOrTryParent);
}
const anfVisitor = {
    FunctionExpression: function (path) {
        const p = path.parent;
        if (!t.isVariableDeclarator(p)) {
            // Name the function application if it is not already named.
            const name = hygiene_1.fresh('fun');
            const bind = h.letExpression(name, path.node);
            path.getStatementParent().insertBefore(bind);
            path.replaceWith(name);
        }
    },
    ArrayExpression: function (path) {
        if (!h.containsCall(path)) {
            return;
        }
        const { elements: es } = path.node;
        let elements = es;
        elements.forEach((e, i) => {
            const id = hygiene_1.fresh('element');
            path.getStatementParent().insertBefore(h.letExpression(id, e));
            path.node.elements[i] = id;
        });
    },
    ObjectExpression: function (path) {
        if (!h.containsCall(path)) {
            return;
        }
        const { properties } = path.node;
        properties.forEach((p2, i) => {
            let p = p2;
            // TODO(arjun): Enable this code to expose a bug.
            // if (!t.isObjectProperty(p)) {
            //   throw new Error(`Expected ObjectProperty but got ${p.type}`);
            // }
            const id = hygiene_1.fresh('element');
            path.getStatementParent().insertBefore(h.letExpression(id, p.value));
            path.node.properties[i].value = id;
        });
    },
    CallExpression: {
        enter(path) {
            if (h.containsCall(path)) {
                if (t.isCallExpression(path.node.callee)) {
                    const id = hygiene_1.fresh('callee');
                    path.getStatementParent().insertBefore(h.letExpression(id, path.node.callee));
                    path.node.callee = id;
                }
                path.node.arguments.forEach((e, i) => {
                    if (!t.isExpression(e)) {
                        throw new Error(`Expected expression`);
                    }
                    const id = hygiene_1.fresh('arg');
                    path.getStatementParent().insertBefore(h.letExpression(id, e));
                    path.node.arguments[i] = id;
                });
            }
        },
        exit(path, state) {
            if (path.node.callee.mark === 'Flat') {
                return;
            }
            const p = path.parent;
            if ((!t.isVariableDeclarator(p) &&
                (!t.isReturnStatement(p) || state.opts.nameReturns)) ||
                (t.isReturnStatement(p) &&
                    withinTryBlock(path))) {
                // Name the function application if it is not already named or
                // if it is not a flat application.
                const name = hygiene_1.fresh('app');
                const bind = h.letExpression(name, path.node);
                path.getStatementParent().insertBefore(bind);
                if (path.parent.type === 'ExpressionStatement') {
                    path.remove();
                }
                else {
                    path.replaceWith(name);
                }
            }
        }
    },
    NewExpression: function (path) {
        if (path.node.callee.mark === 'Flat') {
            return;
        }
        const p = path.parent;
        if (!t.isVariableDeclarator(p)) {
            // Name the function application if it is not already named.
            const name = hygiene_1.fresh('app');
            const bind = h.letExpression(name, path.node);
            path.getStatementParent().insertBefore(bind);
            path.replaceWith(name);
        }
    },
};
module.exports = function () {
    return { visitor: anfVisitor };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5mLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMvYW5mLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7OztHQU9HOztBQUdILGlDQUFpQztBQUNqQyxtQ0FBbUM7QUFDbkMsOENBQXlDO0FBRXpDLFNBQVMsY0FBYyxDQUFDLElBQXNCO0lBQzVDLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDbEYsT0FBTyxDQUFDLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFFRCxNQUFNLFVBQVUsR0FBYTtJQUMzQixrQkFBa0IsRUFBRSxVQUFVLElBQW9DO1FBQ2hFLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM5Qiw0REFBNEQ7WUFDNUQsTUFBTSxJQUFJLEdBQUcsZUFBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFCLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFRCxlQUFlLEVBQUUsVUFBVSxJQUFpQztRQUMxRCxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6QixPQUFPO1NBQ1I7UUFDRCxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7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