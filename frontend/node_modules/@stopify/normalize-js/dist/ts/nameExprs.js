"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const t = require("babel-types");
const hygiene_1 = require("@stopify/hygiene");
const names = {
    ObjectMethod: function (path) {
        if (path.node.kind === "method") {
            let fun = t.functionExpression(hygiene_1.fresh('method'), path.node.params, path.node.body);
            // Little hack necessary to preserve annotation left by freeIds and singleVarDecls
            fun.nestedFunctionFree = path.node.nestedFunctionFree;
            fun.renames = path.node.renames;
            path.replaceWith(t.objectProperty(path.node.key, fun, path.node.computed));
        }
    },
    FunctionExpression: function (path) {
        if (path.node.id === undefined || path.node.id === null) {
            path.node.id = hygiene_1.fresh('funExpr');
            path.node.originalName = '(anonymous function)';
        }
        /*
         * This deals with the following kind of code:
         *
         *   function F() { var F; }
         *
         * We need to able to reference F within its body to restore its stack
         * frame. Therefore, we rename the local variable F.
         */
        else if (path.scope.hasOwnBinding(path.node.id.name) &&
            path.scope.bindings[path.node.id.name].kind !== 'local') {
            const new_id = hygiene_1.fresh('x');
            path.scope.rename(path.node.id.name, new_id.name);
        }
    },
    // NOTE(arjun): Dead code? I think no FunctionDeclarations exist at this
    // point.
    FunctionDeclaration: function (path) {
        if (path.scope.hasOwnBinding(path.node.id.name) &&
            path.scope.bindings[path.node.id.name].kind !== 'local') {
            const new_id = hygiene_1.fresh('funExpr');
            path.scope.rename(path.node.id.name, new_id.name);
        }
    },
};
module.exports = function () {
    return { visitor: names };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZUV4cHJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMvbmFtZUV4cHJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQWlDO0FBQ2pDLDhDQUF5QztBQUV6QyxNQUFNLEtBQUssR0FBWTtJQUNyQixZQUFZLEVBQUUsVUFBVSxJQUE4QjtRQUNwRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUMvQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsa0JBQWtCLENBQUMsZUFBSyxDQUFDLFFBQVEsQ0FBQyxFQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BDLGtGQUFrRjtZQUM1RSxHQUFJLENBQUMsa0JBQWtCLEdBQVMsSUFBSSxDQUFDLElBQUssQ0FBQyxrQkFBa0IsQ0FBQztZQUM5RCxHQUFJLENBQUMsT0FBTyxHQUFTLElBQUksQ0FBQyxJQUFLLENBQUMsT0FBTyxDQUFDO1lBQ2hELElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFDN0MsR0FBRyxFQUNILElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFRCxrQkFBa0IsRUFBRSxVQUFVLElBQW9DO1FBQ2hFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxlQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLElBQVksQ0FBQyxZQUFZLEdBQUcsc0JBQXNCLENBQUM7U0FDMUQ7UUFDRDs7Ozs7OztXQU9HO2FBQ0UsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtZQUM5RCxNQUFNLE1BQU0sR0FBRyxlQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuRDtJQUNILENBQUM7SUFDRCx3RUFBd0U7SUFDeEUsU0FBUztJQUNULG1CQUFtQixFQUFFLFVBQVUsSUFBcUM7UUFDbEUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDeEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtZQUM5RCxNQUFNLE1BQU0sR0FBRyxlQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuRDtJQUNILENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRztJQUNmLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDNUIsQ0FBQyxDQUFDIn0=