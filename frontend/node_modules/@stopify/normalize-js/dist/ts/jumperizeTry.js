"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const t = require("babel-types");
const bh = require("@stopify/util");
const hygiene_1 = require("@stopify/hygiene");
const returnSentinal = t.identifier('finally_rv');
const throwSentinal = t.identifier('finally_exn');
const sentinal = t.memberExpression(t.identifier('$__C'), t.identifier('RV_SENTINAL'));
const sentinalExn = t.memberExpression(t.identifier('$__C'), t.identifier('EXN_SENTINAL'));
const visitor = {
    TryStatement: {
        enter(path) {
            if (path.node.finalizer) {
                this.inTryBlockStack.push(this.inTryWithFinally);
                this.inTryWithFinally = true;
            }
            if (path.node.handler) {
                const x = hygiene_1.fresh('e');
                path.insertBefore(t.variableDeclaration('var', [t.variableDeclarator(x)]));
                path.node.handler.eVar = x;
                path.node.handler.body.body.unshift(t.expressionStatement(t.assignmentExpression('=', x, path.node.handler.param)));
                if (path.node.finalizer) {
                    path.node.handler.body.body.unshift(t.expressionStatement(t.assignmentExpression('=', throwSentinal, sentinalExn)));
                }
            }
        },
        exit(path) {
            if (path.node.finalizer) {
                // NOTE(arjun): If we have several finally blocks in the same scope,
                // this probably creates duplicate declarations.
                const sentinalDecl0 = t.variableDeclaration('let', [
                    t.variableDeclarator(returnSentinal, sentinal)
                ]);
                const sentinalDecl1 = t.variableDeclaration('let', [
                    t.variableDeclarator(throwSentinal, sentinalExn),
                ]);
                bh.enclosingScopeBlock(path).unshift(sentinalDecl0);
                bh.enclosingScopeBlock(path).unshift(sentinalDecl1);
                path.node.finalizer.body.push(bh.sIf(t.binaryExpression('!==', returnSentinal, sentinal), t.returnStatement(returnSentinal), bh.sIf(t.binaryExpression('!==', throwSentinal, sentinalExn), t.throwStatement(throwSentinal))));
            }
            this.inTryWithFinally = this.inTryBlockStack.pop();
        }
    },
    ReturnStatement: {
        exit(path) {
            if (this.inTryWithFinally) {
                const arg = path.node.argument ||
                    t.unaryExpression('void', t.numericLiteral(0));
                path.insertBefore(t.expressionStatement(t.assignmentExpression('=', returnSentinal, arg)));
                path.replaceWith(t.returnStatement(returnSentinal));
                path.skip();
            }
        }
    },
    ThrowStatement: {
        exit(path) {
            if (this.inTryWithFinally) {
                const arg = path.node.argument ||
                    t.unaryExpression('void', t.numericLiteral(0));
                path.insertBefore(t.expressionStatement(t.assignmentExpression('=', throwSentinal, arg)));
                path.replaceWith(t.throwStatement(throwSentinal));
                path.skip();
            }
        }
    },
    Function: {
        enter(path) {
            this.inTryBlockStack.push(this.inTryWithFinally);
            this.inTryWithFinally = false;
        },
        exit(path) {
            this.inTryWithFinally = this.inTryBlockStack.pop();
        }
    },
    Program: {
        enter(path) {
            this.inTryWithFinally = false;
            this.inTryBlockStack = [];
        }
    },
};
function default_1() {
    return { visitor };
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianVtcGVyaXplVHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMvanVtcGVyaXplVHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBb0NBLGlDQUFpQztBQUNqQyxvQ0FBb0M7QUFDcEMsOENBQXlDO0FBRXpDLE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDbEQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNsRCxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDdkYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0FBTzNGLE1BQU0sT0FBTyxHQUFZO0lBQ3ZCLFlBQVksRUFBRTtRQUNaLEtBQUssQ0FBcUIsSUFBOEI7WUFDdEQsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDdkIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ2pELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7YUFDOUI7WUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNyQixNQUFNLENBQUMsR0FBRyxlQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxZQUFZLENBQ2YsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FB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