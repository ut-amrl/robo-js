import * as common from './abstractRuntime';
export * from './abstractRuntime';
import { Result, Stack } from '../types';
import * as types from '../types';
/** This runtime system doesn't actually implement any control operators.
 * Functions such as 'captureCC' are defined and will call their argument,
 * but don't save the stack.
 *
 * Unfortunately, all our program end by invoking the top continuation with
 * "done". Therefore, a program that runs correctly will terminate with
 * 'FudgedContinuationError(done)'. This is unfortunate. But, this
 * transformation still helps with debugging.
 */
export declare class FudgeRuntime extends common.RuntimeImpl {
    kind: types.CaptureMethod;
    constructor();
    captureCC(f: (k: any) => any): void;
    makeCont(stack: Stack): (v: any) => never;
    abstractRun(body: () => any): common.RunResult;
    handleNew(constr: any, ...args: any[]): any;
    endTurn(callback: (onDone: (x: Result) => any) => any): never;
}
