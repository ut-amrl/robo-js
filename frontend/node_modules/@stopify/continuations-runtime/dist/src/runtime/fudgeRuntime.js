"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const common = require("./abstractRuntime");
__export(require("./abstractRuntime"));
class FudgedContinuationError {
    constructor(v) {
        this.v = v;
    }
    toString() {
        return `FudgedContinuationError(${this.v})`;
    }
}
/** This runtime system doesn't actually implement any control operators.
 * Functions such as 'captureCC' are defined and will call their argument,
 * but don't save the stack.
 *
 * Unfortunately, all our program end by invoking the top continuation with
 * "done". Therefore, a program that runs correctly will terminate with
 * 'FudgedContinuationError(done)'. This is unfortunate. But, this
 * transformation still helps with debugging.
 */
class FudgeRuntime extends common.RuntimeImpl {
    constructor() {
        super(Infinity, Infinity);
        this.kind = 'fudge';
    }
    captureCC(f) {
        throw new common.Capture(f, []);
    }
    makeCont(stack) {
        return (v) => {
            throw new FudgedContinuationError(v);
        };
    }
    abstractRun(body) {
        try {
            const v = body();
            return { type: 'normal', value: v };
        }
        catch (exn) {
            if (exn instanceof common.Capture) {
                this.capturing = false;
                return { type: 'capture', stack: exn.stack, f: exn.f };
            }
            else if (exn instanceof common.EndTurn) {
                return { type: 'end-turn', callback: exn.callback };
            }
            else {
                return { type: 'exception', value: exn };
            }
        }
    }
    handleNew(constr, ...args) {
        return new constr(...args);
    }
    endTurn(callback) {
        throw new common.EndTurn(callback);
    }
}
exports.FudgeRuntime = FudgeRuntime;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVkZ2VSdW50aW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3J1bnRpbWUvZnVkZ2VSdW50aW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNENBQTRDO0FBQzVDLHVDQUFrQztBQUlsQyxNQUFNLHVCQUF1QjtJQUMzQixZQUFtQixDQUFNO1FBQU4sTUFBQyxHQUFELENBQUMsQ0FBSztJQUFHLENBQUM7SUFFN0IsUUFBUTtRQUNOLE9BQU8sMkJBQTJCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUM5QyxDQUFDO0NBRUY7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILE1BQWEsWUFBYSxTQUFRLE1BQU0sQ0FBQyxXQUFXO0lBR2xEO1FBQ0UsS0FBSyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUg1QixTQUFJLEdBQXdCLE9BQU8sQ0FBQztJQUlwQyxDQUFDO0lBRUQsU0FBUyxDQUFDLENBQWtCO1FBQzFCLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQVk7UUFDbkIsT0FBTyxDQUFDLENBQU0sRUFBRSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsV0FBVyxDQUFDLElBQWU7UUFDekIsSUFBSTtZQUNGLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDO1lBQ2pCLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUNyQztRQUNELE9BQU8sR0FBRyxFQUFFO1lBQ1YsSUFBSSxHQUFHLFlBQVksTUFBTSxDQUFDLE9BQU8sRUFBRTtnQkFDakMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ3ZCLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDeEQ7aUJBQ0ksSUFBSSxHQUFHLFlBQVksTUFBTSxDQUFDLE9BQU8sRUFBRTtnQkFDdEMsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUNyRDtpQkFDSTtnQkFDSCxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7YUFDMUM7U0FDRjtJQUNILENBQUM7SUFFRCxTQUFTLENBQUMsTUFBVyxFQUFFLEdBQUcsSUFBVztRQUNuQyxPQUFPLElBQUksTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELE9BQU8sQ0FBQyxRQUE2QztRQUNuRCxNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBRUY7QUE1Q0Qsb0NBNENDIn0=