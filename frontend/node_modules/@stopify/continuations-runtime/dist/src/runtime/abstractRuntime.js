"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
// We throw this exception when a continuation value is applied. i.e.,
// captureCC applies its argument to a function that throws this exception.
class Restore {
    constructor(stack, savedStack) {
        this.stack = stack;
        this.savedStack = savedStack;
    }
}
exports.Restore = Restore;
// We throw this exception to end the current turn and continue execution on the
// next turn.
class EndTurn {
    constructor(callback) {
        this.callback = callback;
    }
}
exports.EndTurn = EndTurn;
// This class is used by all the runtimes to start the stack capturing process.
class Capture {
    constructor(f, stack) {
        this.f = f;
        this.stack = stack;
    }
}
exports.Capture = Capture;
class RuntimeImpl {
    constructor(
    // Maximum number of frames that can be consumed by this runtime.
    stackSize, 
    // Number of frames to be restored from the captured stack onto the JS stack.
    restoreFrames, 
    // True when the instrumented program is capturing the stack.
    capturing = false) {
        this.stackSize = stackSize;
        this.restoreFrames = restoreFrames;
        this.capturing = capturing;
        /**
         *  A saved stack trace. This field is only used when a user-mode exception
         * is thrown.
         */
        this.stackTrace = [];
        if (isFinite(stackSize)) {
            assert(restoreFrames <= stackSize, 'Cannot restore more frames than stack size');
        }
        this.stack = [];
        this.savedStack = [];
        this.restoreFrames = restoreFrames;
        this.stackSize = stackSize;
        this.remainingStack = stackSize;
        this.mode = true;
        this.kind = undefined; // the worst
    }
    topK(f) {
        return {
            kind: 'top',
            f: () => {
                this.stack = [];
                this.mode = true;
                return f();
            },
            this: this,
        };
    }
    runtime(body, onDone) {
        while (true) {
            const result = this.abstractRun(body);
            if (result.type === 'normal' || result.type === 'exception') {
                if (this.savedStack.length > 0) {
                    const exception = result.type === 'exception';
                    const ss = this.savedStack;
                    const restarter = this.topK(() => {
                        if (exception) {
                            throw result.value;
                        }
                        else {
                            return result.value;
                        }
                    });
                    this.stack = [restarter];
                    for (let i = 0; i < this.restoreFrames && ss.length - 1 - i >= 0; i++) {
                        this.stack.push(ss.pop());
                    }
                    body = () => {
                        this.mode = false;
                        return this.stack[this.stack.length - 1].f();
                    };
                }
                else if (result.type === 'normal') {
                    assert(this.mode, 'execution completed in restore mode');
                    return onDone(result);
                }
                else if (result.type === 'exception') {
                    assert(this.mode, `execution completed in restore mode, error was: ${result.value}`);
                    const stack = this.stackTrace;
                    this.stackTrace = [];
                    return onDone({ type: 'exception', value: result.value, stack });
                }
            }
            else if (result.type === 'capture') {
                body = () => result.f.call(global, this.makeCont(result.stack));
            }
            else if (result.type === 'restore') {
                body = () => {
                    if (result.stack.length === 0) {
                        throw new Error(`Can't restore from empty stack`);
                    }
                    this.mode = false;
                    this.stack = result.stack;
                    this.savedStack = result.savedStack;
                    const frame = this.stack[this.stack.length - 1];
                    return this.stack[this.stack.length - 1].f.apply(frame.this || global, (frame.params || []));
                };
            }
            else if (result.type === 'end-turn') {
                return result.callback(onDone);
            }
        }
    }
    /** jumper.ts and captureLogics.ts insert calls to pushTrace. */
    pushTrace(line) {
        this.stackTrace.push(line);
    }
    /** jumper.ts inserts calls to clearTrace. */
    clearTrace() {
        this.stackTrace = [];
    }
}
exports.RuntimeImpl = RuntimeImpl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3RSdW50aW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3J1bnRpbWUvYWJzdHJhY3RSdW50aW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQWlDO0FBWWpDLHNFQUFzRTtBQUN0RSwyRUFBMkU7QUFDM0UsTUFBYSxPQUFPO0lBQ2xCLFlBQW1CLEtBQVksRUFBUyxVQUFpQjtRQUF0QyxVQUFLLEdBQUwsS0FBSyxDQUFPO1FBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBTztJQUFHLENBQUM7Q0FDOUQ7QUFGRCwwQkFFQztBQUVELGdGQUFnRjtBQUNoRixhQUFhO0FBQ2IsTUFBYSxPQUFPO0lBQ2xCLFlBQW1CLFFBQThDO1FBQTlDLGFBQVEsR0FBUixRQUFRLENBQXNDO0lBQUksQ0FBQztDQUN2RTtBQUZELDBCQUVDO0FBRUQsK0VBQStFO0FBQy9FLE1BQWEsT0FBTztJQUNsQixZQUFtQixDQUFtQyxFQUFTLEtBQVk7UUFBeEQsTUFBQyxHQUFELENBQUMsQ0FBa0M7UUFBUyxVQUFLLEdBQUwsS0FBSyxDQUFPO0lBQUcsQ0FBQztDQUNoRjtBQUZELDBCQUVDO0FBRUQsTUFBc0IsV0FBVztJQXFCL0I7SUFDRSxpRUFBaUU7SUFDMUQsU0FBaUI7SUFFeEIsNkVBQTZFO0lBQ3RFLGFBQXFCO0lBRTVCLDZEQUE2RDtJQUN0RCxZQUFxQixLQUFLO1FBTjFCLGNBQVMsR0FBVCxTQUFTLENBQVE7UUFHakIsa0JBQWEsR0FBYixhQUFhLENBQVE7UUFHckIsY0FBUyxHQUFULFNBQVMsQ0FBaUI7UUFkbkM7OztXQUdHO1FBQ0ksZUFBVSxHQUFhLEVBQUUsQ0FBQztRQVkvQixJQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN2QixNQUFNLENBQUMsYUFBYSxJQUFJLFNBQVMsRUFDL0IsNENBQTRDLENBQUMsQ0FBQztTQUNqRDtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBZ0IsQ0FBQyxDQUFDLFlBQVk7SUFDNUMsQ0FBQztJQUVELElBQUksQ0FBQyxDQUFZO1FBQ2YsT0FBTztZQUNMLElBQUksRUFBRSxLQUFLO1lBQ1gsQ0FBQyxFQUFFLEdBQUcsRUFBRTtnQkFDTixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztnQkFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ2pCLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDYixDQUFDO1lBQ0QsSUFBSSxFQUFFLElBQUk7U0FDWCxDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU8sQ0FBSSxJQUFlLEVBQUUsTUFBd0I7UUFFbEQsT0FBTSxJQUFJLEVBQUU7WUFDVixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXRDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7Z0JBQzNELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUM5QixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQztvQkFDOUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztvQkFFM0IsTUFBTSxTQUFTLEdBQWMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7d0JBQzFDLElBQUksU0FBUyxFQUFFOzRCQUFFLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQzt5QkFBRTs2QkFDakM7NEJBQUUsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDO3lCQUFFO29CQUMvQixDQUFDLENBQUMsQ0FBQztvQkFFSCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBRXpCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7d0JBQ3JFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUcsQ0FBQyxDQUFDO3FCQUM1QjtvQkFDRCxJQUFJLEdBQUcsR0FBRyxFQUFFO3dCQUNWLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO3dCQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7b0JBQy9DLENBQUMsQ0FBQztpQkFDSDtxQkFDSSxJQUFHLE1BQU0sQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO29CQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxxQ0FBcUMsQ0FBQyxDQUFDO29CQUN6RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDdkI7cUJBQ0ksSUFBRyxNQUFNLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRTtvQkFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsbURBQW1ELE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO29CQUNyRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO29CQUM5QixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztvQkFDckIsT0FBTyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7aUJBQ2xFO2FBQ0Y7aUJBQ0ksSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtnQkFDbEMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ2pFO2lCQUNJLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7Z0JBQ2xDLElBQUksR0FBRyxHQUFHLEVBQUU7b0JBQ1YsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7d0JBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztxQkFDbkQ7b0JBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7b0JBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztvQkFDMUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO29CQUNwQyxNQUFNLEtBQUssR0FBZSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUM1RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFRLENBQUMsQ0FBQztnQkFDdEcsQ0FBQyxDQUFDO2FBQ0g7aUJBQ0ksSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtnQkFDbkMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ2hDO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsZ0VBQWdFO0lBQ3pELFNBQVMsQ0FBQyxJQUFZO1FBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCw2Q0FBNkM7SUFDdEMsVUFBVTtRQUNmLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FnQ0Y7QUF6SkQsa0NBeUpDIn0=