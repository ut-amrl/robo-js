"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const common = require("./abstractRuntime");
__export(require("./abstractRuntime"));
class LazyRuntime extends common.RuntimeImpl {
    constructor(stackSize, restoreFrames) {
        super(stackSize, restoreFrames);
        this.kind = 'lazy';
    }
    captureCC(f) {
        this.capturing = true;
        throw new common.Capture(f, []);
    }
    makeCont(stack) {
        const savedStack = this.savedStack;
        this.savedStack = [];
        for (let i = stack.length - 1; i >= this.restoreFrames; i -= 1) {
            savedStack.push(stack.pop());
        }
        return (x) => {
            let restarter = () => {
                if (x.type === 'exception') {
                    throw x.value;
                }
                else {
                    return x.value;
                }
            };
            throw new common.Restore([this.topK(restarter), ...stack], savedStack);
        };
    }
    endTurn(callback) {
        this.savedStack = [];
        this.stack = [];
        throw new common.EndTurn(callback);
    }
    abstractRun(body) {
        try {
            const v = body();
            return { type: 'normal', value: v };
        }
        catch (exn) {
            if (exn instanceof common.Capture) {
                this.capturing = false;
                return { type: 'capture', stack: exn.stack, f: exn.f };
            }
            else if (exn instanceof common.Restore) {
                return { type: 'restore', stack: exn.stack, savedStack: exn.savedStack };
            }
            else if (exn instanceof common.EndTurn) {
                return { type: 'end-turn', callback: exn.callback };
            }
            else {
                return { type: 'exception', value: exn };
            }
        }
    }
}
exports.LazyRuntime = LazyRuntime;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eVJ1bnRpbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcnVudGltZS9sYXp5UnVudGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDRDQUE0QztBQUM1Qyx1Q0FBa0M7QUFJbEMsTUFBYSxXQUFZLFNBQVEsTUFBTSxDQUFDLFdBQVc7SUFHakQsWUFBWSxTQUFpQixFQUFFLGFBQXFCO1FBQ2xELEtBQUssQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFIbEMsU0FBSSxHQUF3QixNQUFNLENBQUM7SUFJbkMsQ0FBQztJQUVELFNBQVMsQ0FBQyxDQUFpQztRQUN6QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFZO1FBQ25CLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFFckIsS0FBSSxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdELFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRyxDQUFDLENBQUM7U0FDL0I7UUFFRCxPQUFPLENBQUMsQ0FBUyxFQUFFLEVBQUU7WUFDbkIsSUFBSSxTQUFTLEdBQUcsR0FBRyxFQUFFO2dCQUNuQixJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxFQUFFO29CQUMxQixNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUM7aUJBQ2Y7cUJBQ0k7b0JBQ0gsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDO2lCQUNoQjtZQUNILENBQUMsQ0FBQztZQUNGLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3pFLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPLENBQUMsUUFBNkM7UUFDbkQsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsTUFBTSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFlO1FBQ3pCLElBQUk7WUFDRixNQUFNLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQztZQUNqQixPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDckM7UUFDRCxPQUFPLEdBQUcsRUFBRTtZQUNWLElBQUksR0FBRyxZQUFZLE1BQU0sQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUN2QixPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQ3hEO2lCQUNJLElBQUksR0FBRyxZQUFZLE1BQU0sQ0FBQyxPQUFPLEVBQUU7Z0JBQ3RDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7YUFDMUU7aUJBQ0ksSUFBSSxHQUFHLFlBQVksTUFBTSxDQUFDLE9BQU8sRUFBRTtnQkFDdEMsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUNyRDtpQkFDSTtnQkFDSCxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7YUFDMUM7U0FDRjtJQUNILENBQUM7Q0FDRjtBQTVERCxrQ0E0REMifQ==