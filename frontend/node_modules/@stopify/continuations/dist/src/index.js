"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const babel = require("babel-core");
const babylon = require("babylon");
const t = require("babel-types");
const callcc = require("./callcc/callcc");
const hygiene = require("@stopify/hygiene");
const h = require("@stopify/util");
const continuationsRTS = require("@stopify/continuations-runtime");
const cannotCapture_1 = require("./common/cannotCapture");
const exposeImplicitApps = require("./exposeImplicitApps");
const jumper_1 = require("./callcc/jumper");
var flatness_1 = require("./compiler/flatness");
exports.flatness = flatness_1.flatness;
var sourceMaps_1 = require("./compiler/sourceMaps");
exports.getSourceMap = sourceMaps_1.getSourceMap;
var callcc_1 = require("./callcc/callcc");
exports.plugin = callcc_1.default;
__export(require("./runtime/sentinels"));
var cannotCapture_2 = require("./common/cannotCapture");
exports.knownBuiltIns = cannotCapture_2.knownBuiltIns;
exports.reserved = [
    ...cannotCapture_1.knowns,
    "name",
    exposeImplicitApps.implicitsIdentifier.name,
    "$opts",
    "$result",
    "target",
    "newTarget",
    "captureLocals",
    jumper_1.restoreNextFrame.name,
    "frame",
    "RV_SENTINAL",
    "EXN_SENTINAL",
    "finally_rv",
    "finally_exn",
    "captureCC",
    'materializedArguments',
    'argsLen',
    '$top',
    '$S'
];
const visitor = {
    Program(path, state) {
        const opts = {
            getters: false,
            debug: false,
            captureMethod: 'lazy',
            newMethod: 'direct',
            es: 'sane',
            jsArgs: 'simple',
            requireRuntime: false,
            sourceMap: { getLine: () => null },
            // function done(r) { return $rts.onDone(r); }
            onDone: t.functionExpression(t.identifier('done'), [t.identifier('r')], t.blockStatement([
                t.returnStatement(t.callExpression(t.memberExpression(t.identifier('$rts'), t.identifier('onDone')), [t.identifier('r')]))
            ])),
            eval2: false,
            compileMode: 'normal'
        };
        h.transformFromAst(path, [[hygiene.plugin, state.opts]]);
        h.transformFromAst(path, [[callcc.default, opts]]);
        path.stop();
    }
};
/**
 * Compiles a program to support callCC.
 *
 * @param src the program to compile, which may use callCC
 * @returns an ordinary JavaScript program
 */
function compileFromAst(src) {
    try {
        const babelOpts = {
            plugins: [[() => ({ visitor }), {
                        reserved: [],
                        global: t.memberExpression(t.identifier('$rts'), t.identifier('g'))
                    }]],
            babelrc: false,
            ast: false,
            code: true,
            minified: false,
            comments: false,
        };
        const result = babel.transformFromAst(src, undefined, babelOpts);
        if (typeof result.code === 'string') {
            return h.ok(result.code);
        }
        else {
            return h.error('compile failed: no code returned');
        }
    }
    catch (exn) {
        return h.error(exn.toString());
    }
}
exports.compileFromAst = compileFromAst;
/**
 * Compiles a program to support callCC.
 *
 * @param src the program to compile, which may use callCC
 * @returns an ordinary JavaScript program
 */
function compile(src) {
    return h.asResult(() => babylon.parse(src).program)
        .then(p => compileFromAst(p))
        .map(code => new RunnerImpl(code));
}
exports.compile = compile;
class RunnerImpl {
    constructor(code) {
        this.code = code;
        this.g = Object.create(null);
    }
    run(onDone) {
        let stopify = continuationsRTS;
        this.rts = stopify.newRTS('lazy');
        let $rts = { g: this.g, onDone: onDone };
        return eval(this.code);
    }
    control(f) {
        return this.rts.captureCC(k => {
            return f((x) => k({ type: 'normal', value: x }));
        });
    }
    processEvent(body, receiver) {
        this.rts.runtime(body, receiver);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxvQ0FBb0M7QUFDcEMsbUNBQW1DO0FBQ25DLGlDQUFpQztBQUVqQywwQ0FBMEM7QUFDMUMsNENBQTRDO0FBQzVDLG1DQUFtQztBQUVuQyxtRUFBbUU7QUFDbkUsMERBQWdEO0FBQ2hELDJEQUEyRDtBQUMzRCw0Q0FBbUQ7QUFFbkQsZ0RBQStDO0FBQXRDLDhCQUFBLFFBQVEsQ0FBQTtBQUNqQixvREFBcUQ7QUFBNUMsb0NBQUEsWUFBWSxDQUFBO0FBQ3JCLDBDQUFvRDtBQUEzQywwQkFBQSxPQUFPLENBQVU7QUFFMUIseUNBQW9DO0FBQ3BDLHdEQUF1RDtBQUE5Qyx3Q0FBQSxhQUFhLENBQUE7QUFFVCxRQUFBLFFBQVEsR0FBRztJQUNwQixHQUFHLHNCQUFNO0lBQ1QsTUFBTTtJQUNOLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLElBQUk7SUFDM0MsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLGVBQWU7SUFDZix5QkFBZ0IsQ0FBQyxJQUFJO0lBQ3JCLE9BQU87SUFDUCxhQUFhO0lBQ2IsY0FBYztJQUNkLFlBQVk7SUFDWixhQUFhO0lBQ2IsV0FBVztJQUNYLHVCQUF1QjtJQUN2QixTQUFTO0lBQ1QsTUFBTTtJQUNOLElBQUk7Q0FDTCxDQUFDO0FBRUosTUFBTSxPQUFPLEdBQWtCO0lBQzNCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSztRQUNmLE1BQU0sSUFBSSxHQUF1QjtZQUM3QixPQUFPLEVBQUUsS0FBSztZQUNkLEtBQUssRUFBRSxLQUFLO1lBQ1osYUFBYSxFQUFFLE1BQU07WUFDckIsU0FBUyxFQUFFLFFBQVE7WUFDbkIsRUFBRSxFQUFFLE1BQU07WUFDVixNQUFNLEVBQUUsUUFBUTtZQUNoQixjQUFjLEVBQUUsS0FBSztZQUNyQixTQUFTLEVBQUUsRUFBRSxPQUFP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