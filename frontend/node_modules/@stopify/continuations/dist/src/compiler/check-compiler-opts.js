"use strict";
/**
 * This module contains functions to check and normalize compiler options.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const sourceMaps = require("./sourceMaps");
const t = require("babel-types");
const validFlags = [
    'compileFunction',
    'getters',
    'debug',
    'captureMethod',
    'newMethod',
    'es',
    'hofs',
    'jsArgs',
    'requireRuntime',
    'sourceMap',
    'onDone',
    'eval2',
    'compileMode'
];
/**
 * If 'src.key' exists: (1) throws if 'pred(src.key)' is false then (2)
 * copies 'src.key' to 'dst.value'.
 */
function copyProp(dst, src, key, pred, errorMessage) {
    if (src[key] === undefined) {
        return;
    }
    if (!pred(src[key])) {
        throw new Error(errorMessage);
    }
    dst[key] = src[key];
}
exports.copyProp = copyProp;
/**
 * If 'src.key' exists: (1) applies 'f(src.key)', (2) throws if 'pred' does not
 * hold on the result, and (3) copies the result to 'dst.value'.
 */
function transformProp(dst, src, key, f, pred, errorMessage) {
    if (src[key] === undefined) {
        return;
    }
    const value = f(src[key]);
    if (!pred(value)) {
        throw new Error(errorMessage);
    }
    dst[key] = value;
}
exports.transformProp = transformProp;
/**
 * Given a partial 'CompilerOpts', fill in sensible defaults and dynamically
 * enforce type and value checks.
 *
 * @param value a 'CompilerOpts' with elided fields
 */
function checkAndFillCompilerOpts(value, sourceMap) {
    if (value === null || typeof value !== 'object') {
        throw new Error(`expected an object for CompilerOpts`);
    }
    Object.keys(value).forEach(key => {
        if (!validFlags.includes(key)) {
            throw new Error(`invalid flag: ${key}`);
        }
    });
    const opts = {
        compileFunction: false,
        getters: false,
        debug: false,
        captureMethod: 'lazy',
        newMethod: 'wrapper',
        es: 'sane',
        jsArgs: 'simple',
        requireRuntime: false,
        sourceMap: sourceMaps.generateLineMapping(sourceMap),
        onDone: t.functionExpression(t.identifier('onDone'), [], t.blockStatement([])),
        eval2: false,
        compileMode: 'normal'
    };
    copyProp(opts, value, 'compileFunction', (x) => typeof x === 'boolean', `.compileFunction must be a boolean`);
    copyProp(opts, value, 'getters', (x) => typeof x === 'boolean', `.getters must be a boolean`);
    copyProp(opts, value, 'debug', (x) => typeof x === 'boolean', `.debug must be a boolean`);
    copyProp(opts, value, 'captureMethod', (x) => ['lazy', 'catch', 'eager', 'retval', 'original', 'fudge'].includes(x), `.captureMethod must be 'lazy', 'catch', 'eager', 'retval', 'original', or 'fudge'`);
    copyProp(opts, value, 'newMethod', (x) => ['direct', 'wrapper'].includes(x), `.newMethod must be 'direct' or 'wrapper'`);
    copyProp(opts, value, 'es', (x) => ['sane', 'es5'].includes(x), `.es must be either 'sane' or 'es5'`);
    copyProp(opts, value, 'jsArgs', (x) => ['simple', 'faithful', 'full'].includes(x), `.jsArgs must be either 'simple', 'faithful', or 'full'`);
    copyProp(opts, value, 'requireRuntime', (x) => typeof x === 'boolean', `.requireRuntime must be a boolean`);
    // TODO(arjun): enforce pre-condition
    copyProp(opts, value, 'sourceMap', (x) => true, '');
    copyProp(opts, value, 'onDone', (x) => t.isExpression(x), `.onDone must be an expression (Babylon)`);
    copyProp(opts, value, 'compileMode', (x) => ['normal', 'library'].includes(x), `.compileMode must be 'normal' or 'library'`);
    return opts;
}
exports.checkAndFillCompilerOpts = checkAndFillCompilerOpts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2stY29tcGlsZXItb3B0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlci9jaGVjay1jb21waWxlci1vcHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFHSCwyQ0FBMkM7QUFDM0MsaUNBQWlDO0FBR2pDLE1BQU0sVUFBVSxHQUFHO0lBQ2pCLGlCQUFpQjtJQUNqQixTQUFTO0lBQ1QsT0FBTztJQUNQLGVBQWU7SUFDZixXQUFXO0lBQ1gsSUFBSTtJQUNKLE1BQU07SUFDTixRQUFRO0lBQ1IsZ0JBQWdCO0lBQ2hCLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLGFBQWE7Q0FDZCxDQUFDO0FBRUY7OztHQUdHO0FBQ0gsU0FBZ0IsUUFBUSxDQUFDLEdBQVEsRUFBRSxHQUFRLEVBQUUsR0FBVyxFQUN0RCxJQUE2QixFQUFFLFlBQW9CO0lBQ25ELElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtRQUMxQixPQUFPO0tBQ1I7SUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDL0I7SUFDRCxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3RCLENBQUM7QUFWRCw0QkFVQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLGFBQWEsQ0FBQyxHQUFRLEVBQUUsR0FBUSxFQUFFLEdBQVcsRUFDM0QsQ0FBc0IsRUFDdEIsSUFBNkIsRUFBRSxZQUFvQjtJQUNuRCxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDMUIsT0FBTztLQUNSO0lBQ0QsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRTFCLElBQUksQ0FB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