/**
 * Mark functions are not provably flat as 'Untransformed' and others as
 * 'Transformed'. This only marks the approproiate AST nodes. It is the job of
 * the transformation to use the information.
 */
import * as t from 'babel-types';
import { NodePath } from 'babel-traverse';
import { FlatnessMark } from '../helpers';
export declare function markFlatFunctions(): {
    visitor: {
        Program: {
            exit(path: NodePath<t.Program>): void;
        };
        CallExpression: {
            enter(path: NodePath<FlatnessMark<t.DoWhileStatement | t.ForInStatement | t.ForStatement | t.WhileStatement | t.ForOfStatement | t.CallExpression | t.NewExpression>>): void;
        };
        NewExpression: {
            enter(path: NodePath<FlatnessMark<t.DoWhileStatement | t.ForInStatement | t.ForStatement | t.WhileStatement | t.ForOfStatement | t.CallExpression | t.NewExpression>>): void;
        };
        Loop: {
            enter(path: NodePath<FlatnessMark<t.DoWhileStatement | t.ForInStatement | t.ForStatement | t.WhileStatement | t.ForOfStatement | t.CallExpression | t.NewExpression>>): void;
        };
        ThrowStatement: {
            enter(path: NodePath<FlatnessMark<t.DoWhileStatement | t.ForInStatement | t.ForStatement | t.WhileStatement | t.ForOfStatement | t.CallExpression | t.NewExpression>>): void;
        };
    };
};
