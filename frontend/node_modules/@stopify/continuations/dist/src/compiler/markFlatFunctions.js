"use strict";
/**
 * Mark functions are not provably flat as 'Untransformed' and others as
 * 'Transformed'. This only marks the approproiate AST nodes. It is the job of
 * the transformation to use the information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const t = require("babel-types");
let debug = false;
const prog = {
    // Mark the untransformed functions after running call expression markers.
    exit(path) {
        path.traverse(markUntransformed);
    }
};
const funcMarkUntransformed = {
    enter(path) {
        if (!path.node.mark) {
            path.node.mark = 'Flat';
        }
        if (debug && t.isFunctionDeclaration(path.node)) {
            const { loc, mark } = path.node;
            const info = `${mark}: ${path.node.id.name}${loc ? ` on line ${loc.start.line}` : ''}`;
            console.error(info);
        }
        if (debug && t.isFunctionExpression(path.node)) {
            const { loc, mark, id } = path.node;
            const info = `${mark}: ${id ? id.name : '<Anonymous>'}` +
                `${loc ? ` on line ${loc.start.line}` : ''}`;
            console.error(info);
        }
    }
};
const markUntransformed = {
    FunctionDeclaration: funcMarkUntransformed,
    FunctionExpression: funcMarkUntransformed,
};
const callExpr = {
    enter(path) {
        if (path.node.mark === 'Flat') {
            return;
        }
        const fParent = path.findParent(p => t.isFunctionDeclaration(p) || t.isFunctionExpression(p));
        if (fParent !== null && !fParent.node.mark) {
            fParent.node.mark = 'NotFlat';
        }
    }
};
const visitor = {
    Program: prog,
    CallExpression: callExpr,
    NewExpression: callExpr,
    Loop: callExpr,
    ThrowStatement: callExpr
};
function markFlatFunctions() {
    return { visitor };
}
exports.markFlatFunctions = markFlatFunctions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya0ZsYXRGdW5jdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcGlsZXIvbWFya0ZsYXRGdW5jdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7O0FBRUgsaUNBQWlDO0FBSWpDLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQztBQUVsQixNQUFNLElBQUksR0FBRztJQUNYLDBFQUEwRTtJQUMxRSxJQUFJLENBQUMsSUFBeUI7UUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxxQkFBcUIsR0FBRztJQUM1QixLQUFLLENBQUMsSUFBd0U7UUFDNUUsSUFBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztTQUN6QjtRQUVELElBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDOUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2hDLE1BQU0sSUFBSSxHQUNSLEdBQUcsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksR0FBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDN0UsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNyQjtRQUVELElBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDN0MsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNuQyxNQUFNLElBQUksR0FDVCxHQUFHLElBQUksS0FBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRTtnQkFDM0MsR0FBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDaEQsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNyQjtJQUNILENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxpQkFBaUIsR0FBWTtJQUNqQyxtQkFBbUIsRUFBUSxxQkFBc0I7SUFDakQsa0JBQWtCLEVBQVEscUJBQXNCO0NBQ2pELENBQUM7QUFFRixNQUFNLFFBQVEsR0FBRztJQUNmLEtBQUssQ0FBQyxJQUFxRTtRQUN6RSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtZQUM3QixPQUFPO1NBQ1I7UUFDRCxNQUFNLE9BQU8sR0FDWCxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWhGLElBQUksT0FBTyxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQzFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztTQUMvQjtJQUNILENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQUc7SUFDZCxPQUFPLEVBQUUsSUFBSTtJQUNiLGNBQWMsRUFBRSxRQUFRO0lBQ3hCLGFBQWEsRUFBRSxRQUFRO0lBQ3ZCLElBQUksRUFBRSxRQUFRO0lBQ2QsY0FBYyxFQUFFLFFBQVE7Q0FDekIsQ0FBQztBQUVGLFNBQWdCLGlCQUFpQjtJQUMvQixPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDckIsQ0FBQztBQUZELDhDQUVDIn0=