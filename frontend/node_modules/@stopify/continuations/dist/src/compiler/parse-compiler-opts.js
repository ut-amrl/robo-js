"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Command-line to compile continuations.
 */
const commander = require("commander");
const check_compiler_opts_1 = require("./check-compiler-opts");
commander.option('-t, --transform <transformation>', 'either eager, lazy, catch, retval, original, or fudge');
commander.option('-n, --new <new>', 'either direct or wrapper');
commander.option('--es <mode>', 'either sane or es5 (default: sane)');
commander.option('--eval', 'Support eval');
commander.option('--js-args <mode>', 'either simple, faithful, or full (default: simple)');
commander.option('--getters', 'enable support for getters/setters (default: false)');
commander.option('--require-runtime', `use require('stopify') to load the runtime system, which necessary to run
   on Node`);
commander.option('--debug', 'Insert suspensions between every line of code in the source program');
commander.option('--func', 'Compile a top-level function. Doesnt add runtime initialization or cleanup');
commander.option('--compile-mode <mode>', `either normal or library (default: normal)`);
commander.arguments('<srcPath> <dstPath>');
const args = commander.parse(process.argv);
exports.compilerOpts = check_compiler_opts_1.checkAndFillCompilerOpts({
    compileFunction: args.func,
    getters: args.getters,
    debug: args.debug,
    captureMethod: args.transform,
    newMethod: args.new,
    es: args.es,
    compileMode: args.compileMode,
    jsArgs: args.jsArgs,
    requireRuntime: args.requireRuntime
});
const srcPath = args.args[0];
exports.srcPath = srcPath;
const dstPath = args.args[1];
exports.dstPath = dstPath;
if (!srcPath || !dstPath) {
    throw new Error('<srcPath> or <dstPath> is required');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UtY29tcGlsZXItb3B0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlci9wYXJzZS1jb21waWxlci1vcHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0dBRUc7QUFDSCx1Q0FBdUM7QUFFdkMsK0RBQWlFO0FBRWpFLFNBQVMsQ0FBQyxNQUFNLENBQ2Qsa0NBQWtDLEVBQ2xDLHVEQUF1RCxDQUFDLENBQUM7QUFFM0QsU0FBUyxDQUFDLE1BQU0sQ0FDZCxpQkFBaUIsRUFDakIsMEJBQTBCLENBQUMsQ0FBQztBQUU5QixTQUFTLENBQUMsTUFBTSxDQUNkLGFBQWEsRUFDYixvQ0FBb0MsQ0FBQyxDQUFDO0FBRXhDLFNBQVMsQ0FBQyxNQUFNLENBQ2QsUUFBUSxFQUNSLGNBQWMsQ0FBQyxDQUFDO0FBRWxCLFNBQVMsQ0FBQyxNQUFNLENBQ2Qsa0JBQWtCLEVBQ2xCLG9EQUFvRCxDQUFDLENBQUM7QUFFeEQsU0FBUyxDQUFDLE1BQU0sQ0FDZCxXQUFXLEVBQ1gscURBQXFELENBQUMsQ0FBQztBQUV6RCxTQUFTLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUNsQztXQUNTLENBQUMsQ0FBQztBQUViLFNBQVMsQ0FBQyxNQUFNLENBQ2QsU0FBUyxFQUNULHFFQUFxRSxDQUFDLENBQUM7QUFFekUsU0FBUyxDQUFDLE1BQU0sQ0FDZCxRQUFRLEVBQ1IsNEVBQTRFLENBQUMsQ0FBQztBQUNoRixTQUFTLENBQUMsTUFBTSxDQUFDLHVCQUF1QixFQUN0Qyw0Q0FBNEMsQ0FBQyxDQUFDO0FBRWhELFNBQVMsQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUMzQyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUU5QixRQUFBLFlBQVksR0FBaUIsOENBQXdCLENBQUM7SUFDakUsZUFBZSxFQUFFLElBQUksQ0FBQyxJQUFJO0lBQzFCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztJQUNyQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7SUFDakIsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTO0lBQzdCLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRztJQUNuQixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7SUFDWCxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7SUFDN0IsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO0lBQ25CLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztDQUNwQyxDQUFDLENBQUM7QUFFSCxNQUFNLE9BQU8sR0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBTzVCLDBCQUFPO0FBTmhCLE1BQU0sT0FBTyxHQUFXLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFNbkIsMEJBQU87QUFKekIsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRTtJQUN4QixNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7Q0FDdkQifQ==