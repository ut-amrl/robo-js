"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const t = require("babel-types");
const cannotCapture_1 = require("../common/cannotCapture");
const h = require("@stopify/util");
const imm = require("immutable");
var AppType;
(function (AppType) {
    AppType[AppType["None"] = 0] = "None";
    AppType[AppType["Tail"] = 1] = "Tail";
    AppType[AppType["Mixed"] = 2] = "Mixed";
})(AppType = exports.AppType || (exports.AppType = {}));
function joinAppType(x, y) {
    return Math.max(x, y);
}
function joinAppTypes(...args) {
    return args.reduce(joinAppType, AppType.None);
}
function getLabels0(node) {
    if (node === null) {
        return [];
    }
    return node.labels === undefined ? [] : [...node.labels];
}
function getLabels(...nodes) {
    const r = [];
    for (const node of nodes) {
        r.push(...getLabels0(node));
    }
    return [...(new Set(r)).values()];
}
exports.getLabels = getLabels;
function getAppType(node) {
    if (node === null) {
        return AppType.None;
    }
    return node.appType;
}
// true if the expression is a function call that may capture a continuation
function isUnsafeCall(e) {
    return ((t.isCallExpression(e) || t.isNewExpression(e)) && !cannotCapture_1.cannotCapture(e));
}
const visitFunction = {
    enter(path) {
        this.inTryBlockStack.push(this.inTryBlock);
        this.inTryBlock = false;
        const allVars = imm.Set.of(...Object.keys(path.scope.bindings));
        let otherVars = imm.Set.of(...path.node.params.map(h.lvaltoName))
            .union(path.node.id ? imm.Set.of(path.node.id.name) : imm.Set());
        path.node.localVars = allVars.subtract(otherVars).toArray()
            .map(x => t.identifier(x));
    },
    exit(path) {
        this.inTryBlock = this.inTryBlockStack.pop();
        if (path.node.type === 'FunctionDeclaration') {
            path.node.appType = AppType.None;
        }
    }
};
const visitor = {
    TryStatement: {
        enter(path) {
            this.inTryBlockStack.push(this.inTryBlock);
            this.inTryBlock = true;
        },
        exit(path) {
            const { block, finalizer, handler } = path.node;
            this.inTryBlock = this.inTryBlockStack.pop();
            path.node.labels = getLabels(block, finalizer, handler && handler.body);
            // TODO(arjun): This is not exactly right. A try statement has tail calls
            // if and only if the try block has no function calls and all function
            // calls in the catch and finally block are tail calls.
            const t = joinAppTypes(getAppType(block), getAppType(finalizer), getAppType(handler && handler.body));
            path.node.appType = (t === AppType.None) ? AppType.None : AppType.Mixed;
        }
    },
    // TODO(arjun): I think an enclosing function will gather labels from
    // an enclosed function.
    FunctionDeclaration: visitFunction,
    FunctionExpression: visitFunction,
    ObjectMethod: visitFunction,
    Program: {
        enter(path) {
            this.counter = 0;
            this.inTryBlock = false;
            this.inTryBlockStack = [];
        }
    },
    ReturnStatement: {
        exit(path) {
            // Assumes no nested calls.
            const isCall = isUnsafeCall(path.node.argument);
            if (!isCall) {
                path.node.appType = AppType.None;
            }
            else if (this.inTryBlock) {
                path.node.appType = AppType.Mixed;
            }
            else {
                path.node.appType = AppType.Tail;
            }
        }
    },
    CallExpression: function (path) {
        path.node.labels = [this.counter++];
    },
    NewExpression: function (path) {
        path.node.labels = [this.counter++];
    },
    AssignmentExpression: {
        exit(path) {
            path.node.labels = getLabels(path.node.right);
        }
    },
    VariableDeclaration: {
        exit(path) {
            path.node.appType = AppType.None;
        }
    },
    ExpressionStatement: {
        exit(path) {
            const unsafe = t.isAssignmentExpression(path.node.expression) &&
                isUnsafeCall(path.node.expression.right);
            path.node.labels = getLabels(path.node.expression);
            path.node.appType = unsafe ? AppType.Mixed : AppType.None;
        }
    },
    IfStatement: {
        exit(path) {
            const { consequent, alternate } = path.node;
            path.node.labels = getLabels(consequent, alternate);
            path.node.appType = joinAppTypes(getAppType(consequent), getAppType(alternate));
        }
    },
    WhileStatement: {
        exit(path) {
            const { body } = path.node;
            path.node.labels = getLabels(body);
            path.node.appType = getAppType(body);
        }
    },
    LabeledStatement: {
        exit(path) {
            const { body } = path.node;
            path.node.labels = getLabels(body);
            path.node.appType = getAppType(body);
        }
    },
    BlockStatement: {
        exit(path) {
            const { body } = path.node;
            path.node.labels = getLabels(...body);
            path.node.appType = joinAppTypes(...body.map(getAppType));
        }
    },
};
function plugin() {
    return { visitor };
}
exports.plugin = plugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2FsbGNjL2xhYmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQWlDO0FBQ2pDLDJEQUF3RDtBQUN4RCxtQ0FBbUM7QUFDbkMsaUNBQWlDO0FBRWpDLElBQVksT0FJWDtBQUpELFdBQVksT0FBTztJQUNqQixxQ0FBUSxDQUFBO0lBQ1IscUNBQVEsQ0FBQTtJQUNSLHVDQUFTLENBQUE7QUFDWCxDQUFDLEVBSlcsT0FBTyxHQUFQLGVBQU8sS0FBUCxlQUFPLFFBSWxCO0FBY0QsU0FBUyxXQUFXLENBQUMsQ0FBVSxFQUFFLENBQVU7SUFDekMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN4QixDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsR0FBRyxJQUFlO0lBQ3RDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxJQUFxQjtJQUN2QyxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7UUFDakIsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1RCxDQUFDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLEdBQUcsS0FBd0I7SUFDbkQsTUFBTSxDQUFDLEdBQWEsRUFBRSxDQUFDO0lBQ3ZCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3hCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUM3QjtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFH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