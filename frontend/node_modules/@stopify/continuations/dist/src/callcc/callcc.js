"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Adds support for callCC.
 *
 * This module is a Node plugin. In addition, it can be applied from the
 * command line:
 *
 * node built/src/callcc/callcc <filename.js>
 */
const normalizeJs = require("@stopify/normalize-js");
const boxAssignables = require("./boxAssignables");
const desugarNew = require("../common/desugarNew");
const label = require("./label");
const jumper = require("./jumper");
const declVars = require("./declVars");
const t = require("babel-types");
const babel = require("babel-core");
const exposeImplicitApps = require("../exposeImplicitApps");
const exposeGS = require("../exposeGettersSetters");
const bh = require("@stopify/util");
const helpers_1 = require("../helpers");
const $__R = t.identifier('$__R');
const $__C = t.identifier('$__C');
const $top = t.identifier('$top');
const visitor = {
    Program(path, state) {
        const opts = state.opts;
        const doNotWrap = opts.renames || opts.compileFunction ||
            opts.eval2 || opts.compileMode === 'library';
        if (!doNotWrap) {
            // Wrap the program in 'function $top() { body }'
            path.node.body = [
                t.functionDeclaration($top, [], t.blockStatement(path.node.body))
            ];
        }
        // For eval, wrap the expression in 'function() { body }', which lets the
        // rest of the code insert instrumentation to pause during eval. Note that
        // later passes will create a name for this anonymous function to allow
        // reentry.
        if (opts.eval2) {
            path.node.body = [
                t.expressionStatement(t.functionExpression(undefined, [], t.blockStatement(bh.returnLast(path.node.body))))
            ];
        }
        if (opts.getters) {
            bh.transformFromAst(path, [exposeGS.plugin]);
        }
        if (opts.newMethod === 'wrapper') {
            bh.transformFromAst(path, [[desugarNew, opts]]);
        }
        if (opts.es === 'es5') {
            bh.transformFromAst(path, [[exposeImplicitApps.plugin, opts]]);
        }
        bh.transformFromAst(path, [[normalizeJs.plugin, { nameReturns: opts.captureMethod === 'catch' }]]);
        bh.transformFromAst(path, [[boxAssignables.plugin, opts]]);
        bh.transformFromAst(path, [declVars]);
        // If stopifying eval'd string at runtime, don't delimit statements so that
        // we can suspend through the eval.
        bh.transformFromAst(path, [label.plugin]);
        bh.transformFromAst(path, [[jumper.plugin, opts]]);
        path.stop();
        if (!doNotWrap) {
            const id = opts.onDone.id;
            // $__R.runtime($top, opts.onDone);
            path.node.body.push(bh.letExpression(id, opts.onDone, 'const'));
            path.node.body.push(t.expressionStatement(t.callExpression(t.memberExpression($__R, t.identifier('runtime')), [t.memberExpression($top, t.identifier('box')), id])));
        }
        if (!state.opts.compileFunction) {
            path.node.body.unshift(bh.letExpression($__R, t.callExpression(t.memberExpression(t.identifier('$__T'), t.identifier('newRTS')), [t.stringLiteral(opts.captureMethod)]), 'var'));
            path.node.body.unshift(bh.letExpression(t.identifier("$__T"), !opts.requireRuntime ?
                t.identifier('stopify')
                : t.callExpression(t.identifier('require'), [t.stringLiteral(`${helpers_1.runtimePath}/runtime`)]), 'var'));
        }
        const req = opts.requireRuntime ?
            t.callExpression(t.identifier('require'), [t.stringLiteral('stopify/dist/src/stopify/compileFunction')]) :
            t.memberExpression(t.identifier('stopify'), t.identifier('compiler'));
        path.node.body.unshift(bh.letExpression($__C, req, 'const'));
    }
};
function default_1() {
    return { visitor };
}
exports.default = default_1;
function main() {
    const filename = process.argv[2];
    const opts = {
        plugins: [[() => ({ visitor }), {
                    captureMethod: 'eager',
                    handleNew: 'wrapper',
                }]],
        babelrc: false
    };
    babel.transformFile(filename, opts, (err, result) => {
        if (err !== null) {
            throw err;
        }
        console.log(result.code);
    });
}
if (require.main === module) {
    main();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbGNjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NhbGxjYy9jYWxsY2MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztHQU9HO0FBQ0gscURBQXFEO0FBQ3JELG1EQUFtRDtBQUNuRCxtREFBbUQ7QUFDbkQsaUNBQWlDO0FBQ2pDLG1DQUFtQztBQUNuQyx1Q0FBdUM7QUFFdkMsaUNBQWlDO0FBQ2pDLG9DQUFvQztBQUNwQyw0REFBNEQ7QUFDNUQsb0RBQW9EO0FBRXBELG9DQUFvQztBQUNwQyx3Q0FBeUM7QUFFekMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsQyxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFbEMsTUFBTSxPQUFPLEdBQVk7SUFDdkIsT0FBTyxDQUFDLElBQXlCLEVBQUUsS0FBSztRQUN0QyxNQUFNLElBQUksR0FBd0IsS0FBSyxDQUFDLElBQUksQ0FBQztRQUU3QyxNQUFNLFNBQVMsR0FBUyxJQUFLLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxlQUFlO1lBQzNELElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLENBQUM7UUFFL0MsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNkLGlEQUFpRDtZQUNqRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRztnQkFDZixDQUFDLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbEUsQ0FBQztTQUNIO1FBRUQseUVBQXlFO1FBQ3pFLDBFQUEwRTtRQUMxRSx1RUFBdUU7UUFDdkUs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