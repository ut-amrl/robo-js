"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This transformation boxes certain assignable variables to preserve
 * reference equality when the stack is reconstructed.
 *
 * Preconditions:
 * 1. The freeIds pass has been applied.
 */
const t = require("babel-types");
const babel = require("babel-core");
const assert = require("assert");
const h = require("@stopify/util");
const normalize_js_1 = require("@stopify/normalize-js");
const immutable_1 = require("immutable");
const hygiene_1 = require("@stopify/hygiene");
function box(e) {
    return t.objectExpression([t.objectProperty(t.identifier('box'), e === null || e === undefined ?
            t.unaryExpression('void', t.numericLiteral(0)) : e)]);
}
exports.box = box;
function unbox(e) {
    const res = t.memberExpression(e, t.identifier('box'));
    res.mark = e.mark;
    return res;
}
/**
 * Produces 'true' if the identifier should be boxed.
 *
 * @param x an identifier
 * @param path the path to the enclosing Function or Program
 */
function shouldBox(binding, path) {
    if (binding.path.isFunctionDeclaration()) {
        return true;
    }
    if (path.node.type === 'FunctionExpression' &&
        path.node.id &&
        path.node.id.name === binding.identifier.name) {
        return false;
    }
    return (normalize_js_1.freeIds.isNestedFree(path, binding.identifier.name));
}
function liftDecl(self, decl) {
    self.liftDeclStack[self.liftDeclStack.length - 1].push(decl);
}
function liftAssign(self, assign) {
    self.liftAssignStack[self.liftAssignStack.length - 1].push(assign);
}
// NOTE(arjun): The following implements non-strict semantics, where
// arguments[i] and the ith formal argument are aliased. Recall that:
//
// > function F(x) { 'use strict'; arguments[0] = 100; return x }; F(200)
// 200
// > function F(x) { arguments[0] = 100; return x }; F(200)
// 100
//
// if (usesArgs) {
//   params.forEach((x, i) => {
//     if (boxedArgs.contains(x.name)) {
//       const arg = t.identifier('argument');
//       const init = t.assignmentExpression('=',
//         t.memberExpression(arg, t.numericLiteral(i), true),
//         x);
//       path.node.body.body.unshift(t.expressionStatement(init));
//     }
//   });
// }
function enterFunction(self, path) {
    const locals = immutable_1.Set.of(...Object.keys(path.scope.bindings));
    // Mutable variables from this scope that are not shadowed
    const vars0 = self.vars.subtract(locals);
    // Mutable variables from the inner scope
    const vars1 = locals.filter(x => shouldBox(path.scope.bindings[x], path)).toSet();
    const params = path.node.params;
    const boxedArgs = immutable_1.Set.of(...params.filter(x => vars1.includes(x.name))
        .map(x => x.name));
    path.node.boxedArgs = boxedArgs;
    self.parentPathStack.push(self.parentPath);
    self.varsStack.push(self.vars);
    self.parentPath = path;
    self.vars = vars0.union(vars1);
    self.liftDeclStack.push([]);
    self.liftAssignStack.push([]);
}
function exitFunction(self, path) {
    // Lift boxed declarations and hoisted function decl assignments.
    const decls = self.liftDeclStack.pop();
    const assigns = self.liftAssignStack.pop();
    path.node.body.body.unshift(...decls, ...assigns);
    // Box arguments if necessary. We do this after visiting the function
    // body or the initialization statements get messed up.
    path.node.boxedArgs.valueSeq().forEach((x) => {
        const init = t.expressionStatement(t.assignmentExpression("=", t.identifier(x), box(t.identifier(x))));
        init.__boxVarsInit__ = true;
        path.node.body.body.unshift(init);
    });
    self.vars = self.varsStack.pop();
    self.parentPath = self.parentPathStack.pop();
}
const visitor = {
    Program: {
        enter(path) {
            this.parentPathStack = [];
            this.varsStack = [];
            this.parentPath = path;
            // Stopify has used the top-level as a implicit continuation delimiter.
            // i.e., Stopify's continuations are like Racket continuations, which
            // don't capture the rest of a module:
            //
            // (define saved #f)
            // (define f (call/cc (lambda (k) (set! saved k) 100)))
            // (display 200)
            // ; Applying saved will not run (display 200) again
            //
            // Since continuations don't capture top-level definitions, we do not
            // need to box top-level assignable variables, which why we initialize
            // this.vars to the empty set.
            //
            // Note that boxing top-level assignables is also wrong: a boxed top-level
            // variable X is also available as window.X, which we would not know to
            // unbox.
            /**this.vars = Set<string>();**/
            const vars = Object.keys(path.scope.bindings)
                .filter(x => shouldBox(path.scope.bindings[x], path));
            this.vars = immutable_1.Set.of(...vars);
            this.liftDeclStack = [[]];
            this.liftAssignStack = [[]];
        },
        exit(path) {
            const decls = this.liftDeclStack.pop();
            const assigns = this.liftAssignStack.pop();
            if (this.liftDeclStack.length !== 0 ||
                this.liftAssignStack.length !== 0) {
                throw new Error(`Not all declarations or assignments lifted \
during boxing`);
            }
            path.node.body.unshift(...decls, ...assigns);
        }
    },
    ReferencedIdentifier(path) {
        path.skip();
        // NOTE(arjun): The parent type tests are because labels are
        // categorized as ReferencedIdentifiers, which is a bug in
        // Babel, in my opinion.
        if (path.parent.type === "BreakStatement" ||
            path.parent.type === 'ContinueStatement' ||
            path.parent.type === "LabeledStatement") {
            return;
        }
        if (this.vars.includes(path.node.name) ||
            (this.opts.boxes && this.opts.boxes.includes(path.node.name))) {
            path.replaceWith(unbox(path.node));
        }
    },
    VariableDeclaration(path) {
        assert(path.node.declarations.length === 1, 'variable declarations must have exactly one binding');
        const decl = path.node.declarations[0];
        if (decl.id.type !== "Identifier") {
            throw new assert.AssertionError({
                message: 'destructuring not supported'
            });
        }
        if (this.vars.includes(decl.id.name)) {
            liftDecl(this, t.variableDeclaration('var', [t.variableDeclarator(decl.id, box(h.eUndefined))]));
            if (decl.init === null) {
                path.remove();
            }
            else {
                path.replaceWith(t.assignmentExpression('=', decl.id, decl.init));
            }
        }
    },
    BindingIdentifier(path) {
        path.skip();
        if (path.parent.type !== "AssignmentExpression") {
            return;
        }
        if (this.vars.includes(path.node.name) ||
            (this.opts.boxes && this.opts.boxes.includes(path.node.name))) {
            path.replaceWith(unbox(path.node));
        }
    },
    FunctionExpression: {
        enter(path, state) {
            enterFunction(this, path);
        },
        exit(path, state) {
            exitFunction(this, path);
        }
    },
    FunctionDeclaration: {
        enter(path, state) {
            enterFunction(this, path);
        },
        exit(path, state) {
            exitFunction(this, path);
            const vars = this.vars;
            // NOTE(rachit): in `func` mode, the input function is marked with
            // topFunction. It shouldn't be boxed since we want to preserve its
            // signature.
            if (vars.includes(path.node.id.name) &&
                !(state.opts.compileFunction && path.node.topFunction)) {
                const fun = t.functionExpression(hygiene_1.fresh('fun'), path.node.params, path.node.body);
                // This is necessary to get the right function name in
                // a stack trace.
                if (path.node.id.name !== undefined) {
                    fun.originalName = path.node.id.name;
                }
                fun.mark = path.node.mark;
                fun.boxedArgs = path.node.boxedArgs;
                // Little hack necessary to preserve annotation left by freeIds and singleVarDecls
                fun.nestedFunctionFree = path.node.nestedFunctionFree;
                fun.renames = path.node.renames;
                const decl = t.variableDeclaration('var', [t.variableDeclarator(path.node.id, box(h.eUndefined))]);
                const stmt = t.expressionStatement(t.assignmentExpression('=', unbox(path.node.id), fun));
                liftDecl(this, decl);
                liftAssign(this, stmt);
                path.remove();
                path.skip();
            }
        }
    }
};
function plugin() {
    return { visitor };
}
exports.plugin = plugin;
function main() {
    const filename = process.argv[2];
    const opts = { plugins: [() => ({ visitor })], babelrc: false };
    babel.transformFile(filename, opts, (err, result) => {
        if (err !== null) {
            throw err;
        }
        console.log(result.code);
    });
}
if (require.main === module) {
    main();
}
//# sourceMappingURL=data:application/json;base64,