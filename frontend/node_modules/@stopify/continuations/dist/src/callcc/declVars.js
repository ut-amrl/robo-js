"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Assumes that singleVarDecls has run before this and handled all the `let`
 * and `const` declarations.
 *
 * Moves var statements to the top of functions.
 *
 * When a var is moved, it is initialized to undefined. The
 * transformation introduces assignment statements where the var statement
 * originally occurred.
 */
const t = require("babel-types");
const h = require("@stopify/util");
const funWithBody = {
    enter(path) {
        path.node.decls = [];
    },
    exit(path) {
        if (path.node.decls.length > 0) {
            const decl = t.variableDeclaration('var', path.node.decls.map(id => t.variableDeclarator(id)));
            path.node.body.body.unshift(decl);
        }
    }
};
const lift = {
    Program: {
        enter(path) {
            path.node.decls = [];
        },
        exit(path) {
            if (path.node.decls.length > 0) {
                const decl = t.variableDeclaration('var', path.node.decls.map(id => t.variableDeclarator(id)));
                path.node.body.unshift(decl);
            }
        },
    },
    FunctionDeclaration: funWithBody,
    FunctionExpression: funWithBody,
    ObjectMethod: funWithBody,
    VariableDeclaration(path) {
        const { declarations } = path.node;
        let fParent = path.getFunctionParent().node;
        if (!h.isFunWithBody(fParent) && !t.isProgram(fParent)) {
            throw new Error(`Variable declarations should be inside a function. Parent was ${path.node.type}`);
        }
        const stmts = [];
        if (declarations[0].__boxVarsInit__) {
            return;
        }
        for (const decl of declarations) {
            if (decl.id.type !== 'Identifier') {
                throw new Error(`Destructuring assignment not supported`);
            }
            fParent.decls.push(decl.id);
            if (decl.init !== null) {
                // If we call path.insertAfter here, we will add assignments in reverse
                // order. Fortunately, path.replaceWithMultiple can take an array of nodes.
                stmts.push(t.expressionStatement(t.assignmentExpression('=', decl.id, decl.init)));
            }
        }
        path.replaceWithMultiple(stmts);
    }
};
module.exports = function () {
    return { visitor: lift };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjbFZhcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2FsbGNjL2RlY2xWYXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7OztHQVNHO0FBQ0gsaUNBQWlDO0FBQ2pDLG1DQUFtQztBQU9uQyxNQUFNLFdBQVcsR0FBRztJQUNsQixLQUFLLENBQUUsSUFBc0M7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFDRCxJQUFJLENBQUUsSUFBc0M7UUFDMUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxJQUFJLEdBQVk7SUFDcEIsT0FBTyxFQUFFO1FBQ1AsS0FBSyxDQUFDLElBQWtDO1lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUN2QixDQUFDO1FBQ0QsSUFBSSxDQUFDLElBQWtDO1lBQ3JDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDL0IsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDeEQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzlCO1FBQ0gsQ0FBQztLQUNGO0lBQ0QsbUJBQW1CLEVBQUUsV0FBVztJQUNoQyxrQkFBa0IsRUFBRSxXQUFXO0lBQy9CLFlBQVksRUFBRSxXQUFXO0lBQ3pCLG1CQUFtQixDQUFDLElBQXFDO1FBQ3ZELE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ25DLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FBQztRQUU1QyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDdEQsTUFBTSxJQUFJLEtBQUssQ0FDYixpRUFBaUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3RGO1FBRUQsTUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztRQUVoQyxJQUFVLFlBQVksQ0FBQyxDQUFDLENBQUUsQ0FBQyxlQUFlLEVBQUU7WUFDMUMsT0FBTztTQUNSO1FBRUQsS0FBSyxNQUFNLElBQUksSUFBSSxZQUFZLEVBQUU7WUFDL0IsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxZQUFZLEVBQUU7Z0JBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQzthQUMzRDtZQUVBLE9BQThDLENBQUMsS0FBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFckUsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtnQkFDdEIsdUVBQXVFO2dCQUN2RSwyRUFBMkU7Z0JBQzNFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUM5QixDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyRDtTQUNGO1FBQ0QsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRztJQUNmLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDM0IsQ0FBQyxDQUFDIn0=