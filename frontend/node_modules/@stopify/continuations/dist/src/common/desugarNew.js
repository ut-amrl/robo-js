"use strict";
/**
 * This transformation converts all instances of `new` to a function
 * call. Note that the handler itself stil has a `new` expression to deal
 * with native constructors.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("@stopify/util");
const t = require("babel-types");
const cannotCapture_1 = require("./cannotCapture");
/**
 * function handleNew(constr, ...args) {
 *
 *   if (common.knownBuiltIns.includes(constr)) {
 *     return new constr(...args);
 *   }
 *
 *   const obj = Object.create(constr.prototype);
 *   const result = constr.apply(obj, args);
 *
 *   return (typeof result === 'object') ? result : obj;
 *
 * }
 */
module.exports = function () {
    return {
        visitor: {
            Program: {
                exit(path, state) {
                    if (!state.opts.compileFunction) {
                        const constr = t.identifier('constr');
                        const args = t.identifier('args');
                        const knownTest = t.callExpression(t.memberExpression(t.memberExpression(t.identifier('$__C'), t.identifier('knownBuiltIns')), t.identifier('includes')), [constr]);
                        knownTest.mark = 'Flat';
                        const flatNew = t.newExpression(constr, [t.spreadElement(args)]);
                        flatNew.mark = 'Flat';
                        const knownIf = t.ifStatement(knownTest, t.returnStatement(flatNew));
                        const obj = t.identifier('obj');
                        const createCall = t.callExpression(t.memberExpression(t.identifier('Object'), t.identifier('create')), [t.memberExpression(constr, t.identifier('prototype'))]);
                        createCall.mark = 'Flat';
                        const createObj = util_1.letExpression(obj, createCall, 'const');
                        const result = t.identifier('result');
                        const applyConstr = util_1.letExpression(result, t.callExpression(t.memberExpression(constr, t.identifier('apply')), [obj, args]), 'const');
                        const returnObj = t.returnStatement(t.conditionalExpression(t.binaryExpression('===', t.unaryExpression('typeof', result), t.stringLiteral('object')), result, obj));
                        const handleNewFunction = t.functionDeclaration(t.identifier('handleNew'), [constr, t.restElement(args)], t.blockStatement([
                            knownIf,
                            createObj,
                            applyConstr,
                            returnObj
                        ]));
                        path.node.body.unshift(handleNewFunction);
                    }
                }
            },
            NewExpression(path) {
                if (path.node.mark === 'Flat') {
                    return;
                }
                if (t.isIdentifier(path.node.callee) &&
                    cannotCapture_1.knowns.includes(path.node.callee.name)) {
                    return;
                }
                const { callee, arguments: args } = path.node;
                if (t.isIdentifier(callee) && cannotCapture_1.knowns.includes(callee.name)) {
                    return;
                }
                path.replaceWith(t.callExpression(t.identifier('handleNew'), [callee, ...args]));
            }
        }
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzdWdhck5ldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vZGVzdWdhck5ldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7QUFHSCx3Q0FBOEM7QUFJOUMsaUNBQWlDO0FBRWpDLG1EQUF5QztBQUV6Qzs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRztJQUNmLE9BQU87UUFDTCxPQUFPLEVBQUU7WUFDUCxPQUFPLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLElBQXlCLEVBQUUsS0FBMkI7b0JBQ3pELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTt3QkFDL0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdEMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQzt3QkFDbEMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDLGNBQWMsQ0FDaEMsQ0FBQyxDQUFDLGdCQUFnQixDQUNoQixDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQ3ZFLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsRUFDM0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUNOLFNBQVUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO3dCQUMvQixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMzRCxPQUFRLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQzt3QkFDN0IsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLFdBQVcs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