"use strict";
/**
 * `func` compile mode should be used when function bodies need to be compiled
 * while preserving the function signatures. This is currently being used in
 * the pyret compiler.
 *
 * This passes around information to make sure that:
 * - the function signature is preserved
 * - globals are not redeclared (since the input function might capture variables)
 */
Object.defineProperty(exports, "__esModule", { value: true });
const babel = require("babel-core");
const t = require("babel-types");
const stopifyCallCC = require("./stopifyCallCC");
const assert = require("assert");
const util = require("@stopify/util");
var continuations_1 = require("@stopify/continuations");
exports.RV_SENTINAL = continuations_1.RV_SENTINAL;
exports.EXN_SENTINAL = continuations_1.EXN_SENTINAL;
exports.knownBuiltIns = continuations_1.knownBuiltIns;
const visitor = {
    Program: {
        enter(path, { opts }) {
            path.stop();
            assert.equal(path.node.body.length, 1);
            const func = path.node.body[0];
            if (func.type !== 'FunctionDeclaration') {
                throw new Error('Must compile a top-level function');
            }
            else {
                // If compile a string to be eval'd, convert last statement to a return
                // statement
                if (opts.eval) {
                    const lastStatement = func.body.body.pop();
                    if (lastStatement.type === 'ExpressionStatement') {
                        func.body.body.push(t.returnStatement(lastStatement.expression));
                    }
                    else {
                        func.body.body.push(lastStatement);
                    }
                }
            }
            util.transformFromAst(path, [[stopifyCallCC.plugin, opts]]);
        }
    }
};
const defaultOpts = {
    getters: false,
    compileFunction: true,
    debug: false,
    captureMethod: 'lazy',
    newMethod: 'wrapper',
    es: 'sane',
    jsArgs: 'simple',
    requireRuntime: false,
    onDone: t.functionExpression(t.identifier('onDone'), [], t.blockStatement([])),
    sourceMap: { getLine: (x, y) => null },
    eval2: false,
    compileMode: 'normal'
};
function compileFunction(code, opts = defaultOpts) {
    const babelOpts = {
        plugins: [[() => ({ visitor }), opts]],
        babelrc: false
    };
    const { code: transformed } = babel.transform(code, babelOpts);
    if (!transformed) {
        throw new Error("Failed to transform function");
    }
    return transformed;
}
exports.compileFunction = compileFunction;
function compileEval(code, compilerOpts, renames, boxes) {
    const toCompile = `function __eval__function() { ${code} }`;
    const transformed = compileFunction(toCompile, Object.assign({}, compilerOpts, { renames,
        boxes }));
    return `(${transformed})()`;
}
exports.compileEval = compileEval;
function default_1() {
    return { visitor };
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZUZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3BpZnkvY29tcGlsZUZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7R0FRRzs7QUFFSCxvQ0FBb0M7QUFDcEMsaUNBQWlDO0FBRWpDLGlEQUFpRDtBQUNqRCxpQ0FBaUM7QUFFakMsc0NBQXNDO0FBQ3RDLHdEQUFrRjtBQUF6RSxzQ0FBQSxXQUFXLENBQUE7QUFBRSx1Q0FBQSxZQUFZLENBQUE7QUFBRSx3Q0FBQSxhQUFhLENBQUE7QUFFakQsTUFBTSxPQUFPLEdBQVk7SUFDdkIsT0FBTyxFQUFFO1FBQ1AsS0FBSyxDQUFDLElBQXlCLEVBQUUsRUFBRSxJQUFJLEVBQUU7WUFDdkMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ1osTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0IsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLHFCQUFxQixFQUFFO2dCQUN2QyxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7YUFDdEQ7aUJBRUk7Z0JBQ0gsdUVBQXVFO2dCQUN2RSxZQUFZO2dCQUNaLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtvQkFDYixNQUFNLGFBQWEsR0FBMkIsSUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFHLENBQUM7b0JBRXJFLElBQUksYUFBYSxDQUFDLElBQUksS0FBSyxxQkFBcUIsRUFBRTt3QkFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7cUJBQ2xFO3lCQUNJO3dCQUNILElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztxQkFDcEM7aUJBQ0Y7YUFFRjtZQUVELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlELENBQUM7S0FDRjtDQUNGLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBd0I7SUFDckMsT0FBTyxFQUFFLEtBQUs7SUFDZCxlQUFlLEVBQUUsSUFBSTtJQUNyQixLQUFLLEVBQUUsS0FBSztJQUNaLGFBQWEsRUFBRSxNQUFNO0lBQ3JCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLEVBQUUsRUFBRSxNQUFNO0lBQ1YsTUFBTSxFQUFFLFFBQVE7SUFDaEIsY0FBYyxFQUFFLEtBQUs7SUFDckIsTUFBTSxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlFLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRTtJQUN0QyxLQUFLLEVBQUUsS0FBSztJQUNaLFdBQVcsRUFBRSxRQUFRO0NBQ3hCLENBQUM7QUFFRixTQUFnQixlQUFlLENBQzdCLElBQVksRUFDWixPQUE0QixXQUFXO0lBQ3ZDLE1BQU0sU0FBUyxHQUFHO1FBQ2hCLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdEMsT0FBTyxFQUFFLEtBQUs7S0FDZixDQUFDO0lBQ0YsTUFBTSxFQUFFLElBQUksRUFBQyxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM5RCxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztLQUNqRDtJQUNELE9BQU8sV0FBVyxDQUFDO0FBQ3JCLENBQUM7QUFaRCwwQ0FZQztBQUVELFNBQWdCLFdBQVcsQ0FBQyxJQUFZLEVBQUUsWUFBaUMsRUFDekUsT0FBa0MsRUFBRSxLQUFlO0lBQ2pELE1BQU0sU0FBUyxHQUFHLGlDQUFpQyxJQUFJLElBQUksQ0FBQztJQUM1RCxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsU0FBUyxFQUFFLGtCQUMxQyxZQUFZLElBQ2YsT0FBTztRQUNQLEtBQUssR0FDQyxDQUFDLENBQUM7SUFDVixPQUFPLElBQUksV0FBWSxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQVRILGtDQVNHO0FBRUg7SUFDRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDckIsQ0FBQztBQUZELDRCQUVDIn0=