"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const t = require("babel-types");
function insertSuspendHelper(body, opts) {
    const newBody = [];
    newBody.suspends = false;
    body.forEach((v, i) => {
        const loc = v.loc;
        let ln;
        if (loc) {
            ln = opts.sourceMap.getLine(loc.start.line, loc.start.column);
            if (ln) {
                newBody.push(t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.memberExpression(t.identifier('$S'), t.identifier('suspendRTS')), t.identifier('linenum')), t.numericLiteral(ln))), t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("$S"), t.identifier("suspend")), [])), v);
                newBody.suspends = true;
            }
            else {
                newBody.push(v);
            }
        }
        else {
            newBody.push(v);
        }
    });
    return newBody;
}
const insertSuspend = {
    BlockStatement: {
        exit(path, s) {
            path.node.body = insertSuspendHelper(path.node.body, s.opts);
        }
    },
    IfStatement(path) {
        if (path.node.consequent.type !== "BlockStatement") {
            const block = t.blockStatement([path.node.consequent]);
            path.node.consequent = block;
        }
        if (path.node.alternate &&
            path.node.alternate.type !== "BlockStatement") {
            const block = t.blockStatement([path.node.alternate]);
            path.node.alternate = block;
        }
    },
    Loop: {
        enter(path) {
            if (path.node.body.type !== "BlockStatement") {
                const body = t.blockStatement([path.node.body]);
                path.node.body = body;
            }
        },
        exit(path) {
            if (t.isBlockStatement(path.node.body) &&
                !path.node.body.suspends) {
                path.node.body.body.push(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("$S"), t.identifier("suspend")), [])));
            }
        }
    },
    Program: {
        exit(path, { opts }) {
            if (opts.compileFunction && !opts.eval) {
                if (path.node.body[0].type === 'FunctionDeclaration') {
                    path.node.body[0].topFunction = true;
                }
                else {
                    throw new Error(`Compile function expected top-level functionDeclaration`);
                }
            }
            path.node.body = insertSuspendHelper(path.node.body, opts);
        }
    },
};
function default_1() {
    return { visitor: insertSuspend };
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VzcGVuZFN0ZXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RvcGlmeS9zdXNwZW5kU3RlcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGlDQUFpQztBQUdqQyxTQUFTLG1CQUFtQixDQUFDLElBQW1CLEVBQUUsSUFBa0I7SUFDbEUsTUFBTSxPQUFPLEdBQWtCLEVBQUUsQ0FBQztJQUM1QixPQUFRLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BCLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDbEIsSUFBSSxFQUFpQixDQUFDO1FBQ3RCLElBQUksR0FBRyxFQUFFO1lBQ1AsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUQsSUFBSSxFQUFFLEVBQUU7Z0JBQ04sT0FBTyxDQUFDLElBQUksQ0FDVixDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsRUFDOUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQy9HLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUN4QixDQUFDLENBQUMsbUJBQW1CLENBQ25CLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFD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