"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const generic_1 = require("../generic");
const sprintf_1 = require("sprintf");
const data = document.getElementById('data');
const startTime = Date.now();
let lastYieldTime;
let yieldIntervals = [];
let yields = 0;
console.log = function (str) {
    data.value = data.value + str + '\n';
    const evt = new Event('change');
    data.dispatchEvent(evt);
};
window.onerror = (message, url, line, col, error) => {
    console.log('An error occurred');
    console.log(message);
    if (error && error.stack) {
        console.log(error.stack);
    }
    window.document.title = "done";
};
const opts = stopify.parseRuntimeOpts(JSON.parse(decodeURIComponent(window.location.hash.slice(1))));
const handle = stopify.stopify(opts.filename, opts);
function onDone() {
    const endTime = Date.now();
    const runningTime = endTime - startTime;
    const latencyAvg = runningTime / yields;
    let latencyVar;
    console.log("BEGIN STOPIFY BENCHMARK RESULTS");
    if (opts.variance) {
        console.log("BEGIN VARIANCE");
        for (let i = 0; i < yieldIntervals.length; i++) {
            console.log(`${i},${yieldIntervals[i]}`);
        }
        console.log("END VARIANCE");
        if (yields === 0) {
            latencyVar = "0";
        }
        else {
            latencyVar = sprintf_1.sprintf("%.2f", generic_1.sum(yieldIntervals.map(x => (latencyAvg - x) * (latencyAvg - x))) / yields);
        }
    }
    else {
        latencyVar = 'NA';
    }
    console.log(`${runningTime},${yields},${sprintf_1.sprintf("%.2f", latencyAvg)},${latencyVar}`);
    console.log('OK.');
    window.document.title = 'done';
}
// Function used by `-t original` to signal the completion of a run.
function originalOnDone() {
    const runningTime = Date.now() - startTime;
    console.log("BEGIN STOPIFY BENCHMARK RESULTS");
    console.log(`${runningTime},0,Infinity,NA`);
    console.log('OK.');
    window.document.title = 'done';
}
window.originalOnDone = originalOnDone;
handle.run(onDone, () => {
    yields++;
    if (opts.variance) {
        const now = Date.now();
        if (typeof lastYieldTime === 'number') {
            yieldIntervals.push(now - lastYieldTime);
        }
        lastYieldTime = now;
    }
});
if (typeof opts.stop !== 'undefined') {
    window.setTimeout(() => handle.pause(onDone), opts.stop * 1000);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rlc3RpbmcvbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQWlDO0FBQ2pDLHFDQUFrQztBQUlsQyxNQUFNLElBQUksR0FBd0IsUUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUUsQ0FBQztBQUNuRSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDN0IsSUFBSSxhQUFpQyxDQUFDO0FBQ3RDLElBQUksY0FBYyxHQUFhLEVBQUUsQ0FBQztBQUNsQyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFFZixPQUFPLENBQUMsR0FBRyxHQUFHLFVBQVUsR0FBUTtJQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztJQUNyQyxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7SUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckIsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtRQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMxQjtJQUNELE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNqQyxDQUFDLENBQUM7QUFFRixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsZ0JB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