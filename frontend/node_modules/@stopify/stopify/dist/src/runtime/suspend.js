"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const setImmediate_1 = require("./setImmediate");
function badResume(x) {
    throw new Error('program is not paused. (Did you call .resume() twice?)');
}
exports.badResume = badResume;
function defaultDone(x) {
    if (x.type === 'exception') {
        console.error(x.value);
    }
}
exports.defaultDone = defaultDone;
const normalUndefResult = { type: 'normal', value: undefined };
/**
 * Instance of a runtime extended with the suspend() function. Used by
 * instrumented programs produced by stopify.
 */
class RuntimeWithSuspend {
    constructor(
    /**
     * Abstract runtime used to implement stack saving and restoring logic
     */
    rts, yieldInterval, estimator, 
    /** The runtime system yields control whenever this function produces
     * 'true' or when the estimated elapsed time exceeds 'yieldInterval'.
     */
    mayYield = function () { return false; }, 
    /** This function is applied immediately before stopify yields control to
     *  the browser's event loop. If the function produces 'false', the
     *  computation does not resume.
     */
    onYield = function () { return true; }, 
    /**
     * Called when execution reaches the end of any stopified module.
     */
    onEnd = function (x) { this.estimator.cancel(); defaultDone(x); }, continuation = badResume, onDone = defaultDone, 
    /**
     * Current line number in the source program. Used in `--debug` mode.
     */
    linenum = undefined) {
        this.rts = rts;
        this.yieldInterval = yieldInterval;
        this.estimator = estimator;
        this.mayYield = mayYield;
        this.onYield = onYield;
        this.onEnd = onEnd;
        this.continuation = continuation;
        this.onDone = onDone;
        this.linenum = linenum;
    }
    // Resume a suspended program.
    resumeFromCaptured() {
        const cont = this.continuation;
        const onDone = this.onDone;
        // Clear the saved continuation, or invoking .resumeFromCaptured() twice
        // in a row will restart the computation.
        this.continuation = badResume;
        this.onDone = defaultDone;
        return this.rts.runtime(() => cont(normalUndefResult), onDone);
    }
    /**
     * Call this function to suspend a running program. When called, it initiates
     * stack capturing by calling the `captureCC` function defined by the current
     * runtime.
     *
     * Internally uses stopify's timing mechanism to decide whether or not to
     * suspend.
     *
     * @param force forces a suspension when `true`.
     */
    suspend(force) {
        // If there are no more stack frame left to be consumed, save the stack
        // and continue running the program.
        if (isFinite(this.rts.stackSize) && this.rts.remainingStack <= 0) {
            this.rts.remainingStack = this.rts.stackSize;
            return this.rts.captureCC((continuation) => {
                if (this.onYield()) {
                    return continuation(normalUndefResult);
                }
            });
        }
        if (force || this.mayYield() ||
            (this.estimator.elapsedTime() >= this.yieldInterval)) {
            if (isFinite(this.rts.stackSize)) {
                this.rts.remainingStack = this.rts.stackSize;
            }
            this.estimator.reset();
            return this.rts.captureCC((continuation) => {
                return this.rts.endTurn((onDone) => {
                    this.continuation = continuation;
                    this.onDone = onDone;
                    if (this.onYield()) {
                        return setImmediate_1.setImmediate(() => {
                            this.rts.runtime(() => continuation(normalUndefResult), onDone);
                        });
                    }
                });
            });
        }
    }
}
exports.RuntimeWithSuspend = RuntimeWithSuspend;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VzcGVuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydW50aW1lL3N1c3BlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBOEM7QUFJOUMsU0FBZ0IsU0FBUyxDQUFDLENBQVM7SUFDakMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3REFBd0QsQ0FBQyxDQUFDO0FBQzVFLENBQUM7QUFGRCw4QkFFQztBQUVELFNBQWdCLFdBQVcsQ0FBQyxDQUFTO0lBQ25DLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7UUFDMUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDeEI7QUFDSCxDQUFDO0FBSkQsa0NBSUM7QUFFRCxNQUFNLGlCQUFpQixHQUFXLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUM7QUFFdkU7OztHQUdHO0FBQ0gsTUFBYSxrQkFBa0I7SUFFN0I7SUFDRTs7T0FFRztJQUNJLEdBQVksRUFDWixhQUFxQixFQUNyQixTQUErQjtJQUN0Qzs7T0FFRztJQUNJLFdBQVcsY0FBc0IsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3ZEOzs7T0FHRztJQUNJLFVBQVUsY0FBc0IsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JEOztPQUVHO0lBQ0ksUUFBUSxVQUFvQyxDQUFTLElBQVUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDekcsZUFBZSxTQUFTLEVBQ3hCLFNBQVMsV0FBVztJQUMzQjs7T0FFRztJQUNJLFVBQThCLFNBQVM7UUFyQnZDLFFBQUcsR0FBSCxHQUFHLENBQVM7UUFDWixrQkFBYSxHQUFiLGFBQWEsQ0FBUTtRQUNyQixjQUFTLEdBQVQsU0FBUyxDQUFzQjtRQUkvQixhQUFRLEdBQVIsUUFB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