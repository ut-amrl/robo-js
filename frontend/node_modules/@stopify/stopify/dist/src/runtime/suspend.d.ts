import { ElapsedTimeEstimator } from '@stopify/estimators';
import { Runtime, Result } from '@stopify/continuations-runtime';
export declare function badResume(x: Result): any;
export declare function defaultDone(x: Result): any;
/**
 * Instance of a runtime extended with the suspend() function. Used by
 * instrumented programs produced by stopify.
 */
export declare class RuntimeWithSuspend {
    /**
     * Abstract runtime used to implement stack saving and restoring logic
     */
    rts: Runtime;
    yieldInterval: number;
    estimator: ElapsedTimeEstimator;
    /** The runtime system yields control whenever this function produces
     * 'true' or when the estimated elapsed time exceeds 'yieldInterval'.
     */
    mayYield: () => boolean;
    /** This function is applied immediately before stopify yields control to
     *  the browser's event loop. If the function produces 'false', the
     *  computation does not resume.
     */
    onYield: () => boolean;
    /**
     * Called when execution reaches the end of any stopified module.
     */
    onEnd: (this: RuntimeWithSuspend, x: Result) => void;
    continuation: typeof badResume;
    onDone: typeof defaultDone;
    /**
     * Current line number in the source program. Used in `--debug` mode.
     */
    linenum: undefined | number;
    constructor(
    /**
     * Abstract runtime used to implement stack saving and restoring logic
     */
    rts: Runtime, yieldInterval: number, estimator: ElapsedTimeEstimator, 
    /** The runtime system yields control whenever this function produces
     * 'true' or when the estimated elapsed time exceeds 'yieldInterval'.
     */
    mayYield?: () => boolean, 
    /** This function is applied immediately before stopify yields control to
     *  the browser's event loop. If the function produces 'false', the
     *  computation does not resume.
     */
    onYield?: () => boolean, 
    /**
     * Called when execution reaches the end of any stopified module.
     */
    onEnd?: (this: RuntimeWithSuspend, x: Result) => void, continuation?: typeof badResume, onDone?: typeof defaultDone, 
    /**
     * Current line number in the source program. Used in `--debug` mode.
     */
    linenum?: undefined | number);
    resumeFromCaptured(): any;
    /**
     * Call this function to suspend a running program. When called, it initiates
     * stack capturing by calling the `captureCC` function defined by the current
     * runtime.
     *
     * Internally uses stopify's timing mechanism to decide whether or not to
     * suspend.
     *
     * @param force forces a suspension when `true`.
     */
    suspend(force?: boolean): void;
}
