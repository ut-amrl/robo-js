"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const check_compiler_opts_1 = require("@stopify/continuations/dist/src/compiler/check-compiler-opts");
const validFlags = [
    'filename',
    'estimator',
    'yieldInterval',
    'resampleInterval',
    'timePerElapsed',
    'stop',
    'variance',
    'env',
    'stackSize',
    'restoreFrames'
];
/**
 * Given a partial 'Opts', fill in sensible defaults and dynamically
 * enforce type and value checks.
 *
 * @param value a 'CompilerOpts' with elided fields
 */
function checkAndFillRuntimeOpts(value) {
    if (value === null || typeof value !== 'object') {
        throw new Error(`expected an object for Opts`);
    }
    Object.keys(value).forEach(key => {
        if (!validFlags.includes(key)) {
            throw new Error(`invalid flag: ${key}`);
        }
    });
    const opts = {
        estimator: 'velocity',
        yieldInterval: 100,
        resampleInterval: 100,
        timePerElapsed: 1,
        stackSize: Infinity,
        restoreFrames: Infinity,
        filename: '',
        stop: undefined,
        variance: false,
        env: 'chrome'
    };
    check_compiler_opts_1.copyProp(opts, value, 'estimator', (x) => ['exact', 'reservoir', 'velocity', 'interrupt', 'countdown'].includes(x), `.estimator must be either 'reservoir', 'velocity', 'interrupt', 'countdown', or 'exact'`);
    check_compiler_opts_1.transformProp(opts, value, 'yieldInterval', (x) => Number(x), (x) => typeof x === 'number' && x > 0, `.yieldInterval must be a number greater than zero`);
    check_compiler_opts_1.transformProp(opts, value, 'resampleInterval', (x) => Number(x), (x) => typeof x === 'number' && x > 0, `.resampleInterval must be a number greater than zero`);
    check_compiler_opts_1.transformProp(opts, value, 'timePerElapsed', (x) => Number(x), (x) => typeof x === 'number' && x > 0, `.timePerElapsed must be a number greater than zero`);
    check_compiler_opts_1.transformProp(opts, value, 'stackSize', (x) => Number(x), (x) => typeof x === 'number' && x > 0, `.stackSize must be a number greater than zero`);
    check_compiler_opts_1.transformProp(opts, value, 'restoreFrames', (x) => Number(x), (x) => typeof x === 'number' && x > 0, `.restoreFrames must be a number greater than zero`);
    // TODO(arjun): The following flags only exist for benchmarking and testing
    // They don't really belong in the system.
    check_compiler_opts_1.copyProp(opts, value, 'stop', (x) => true, '');
    check_compiler_opts_1.copyProp(opts, value, 'variance', (x) => true, '');
    check_compiler_opts_1.copyProp(opts, value, 'env', (x) => true, '');
    check_compiler_opts_1.copyProp(opts, value, 'filename', (x) => true, '');
    return opts;
}
exports.checkAndFillRuntimeOpts = checkAndFillRuntimeOpts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2stcnVudGltZS1vcHRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3J1bnRpbWUvY2hlY2stcnVudGltZS1vcHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esc0dBQ2lFO0FBRWpFLE1BQU0sVUFBVSxHQUFHO0lBQ2pCLFVBQVU7SUFDVixXQUFXO0lBQ1gsZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsTUFBTTtJQUNOLFVBQVU7SUFDVixLQUFLO0lBQ0wsV0FBVztJQUNYLGVBQWU7Q0FDaEIsQ0FBQztBQUVGOzs7OztHQUtHO0FBQ0gsU0FBZ0IsdUJBQXVCLENBQUMsS0FBMkI7SUFDakUsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUMvQyxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7S0FDaEQ7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLElBQUksR0FBZ0I7UUFDeEIsU0FBUyxFQUFFLFVBQVU7UUFDckIsYUFBYSxFQUFFLEdBQUc7UUFDbEIsZ0JBQWdCLEVBQUUsR0FBRztRQUNyQixjQUFjLEVBQUUsQ0FBQztRQUNqQixTQUFTLEVBQUUsUUFBUTtRQUNuQixhQUFhLEVBQUUsUUFBUTtRQUV2QixRQUFRLEVBQUUsRUFBRTtRQUNaLElBQUksRUFBRSxTQUFTO1FBQ2YsUUFBUSxFQUFFLEtBQUs7UUFDZixHQUFHLEVBQUUsUUFBUTtLQUNkLENBQUM7SUFFRiw4QkFBUSxDQUFDLElBQUksRUFB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