"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const abstractRunner_1 = require("../runtime/abstractRunner");
const check_runtime_opts_1 = require("../runtime/check-runtime-opts");
// We need to provide these for stopify-continuations
__export(require("@stopify/continuations-runtime/dist/src/runtime/runtime"));
__export(require("@stopify/continuations/dist/src/runtime/implicitApps"));
// For testing / benchmarking convenience.
var parse_runtime_opts_1 = require("../parse-runtime-opts");
exports.parseRuntimeOpts = parse_runtime_opts_1.parseRuntimeOpts;
let runner;
class Runner extends abstractRunner_1.AbstractRunner {
    constructor(url, opts) {
        super(opts);
        this.url = url;
    }
    run(onDone, onYield, onBreakpoint) {
        this.runInit(onDone, onYield, onBreakpoint);
        const script = document.createElement('script');
        script.setAttribute('src', this.url);
        document.body.appendChild(script);
    }
}
/**
 * Called by the stopified program to get suspend() and other functions.
 */
function init(rts) {
    if (runner === undefined) {
        throw new Error('stopify not called');
    }
    return runner.init(rts);
}
exports.init = init;
/**
 * Control the execution of a pre-compiled program.
 *
 * @param url URL of a pre-compiled program
 * @param opts runtime settings
 */
function stopify(url, optionalRuntimeOpts) {
    const runtimeOpts = check_runtime_opts_1.checkAndFillRuntimeOpts(optionalRuntimeOpts || {});
    runner = new Runner(url, runtimeOpts);
    return runner;
}
exports.stopify = stopify;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVudGltZU9ubHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZW50cnlwb2ludHMvcnVudGltZU9ubHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFPQSw4REFBMkQ7QUFDM0Qsc0VBQXdFO0FBQ3hFLHFEQUFxRDtBQUNyRCw2RUFBd0U7QUFDeEUsMEVBQXFFO0FBRXJFLDBDQUEwQztBQUMxQyw0REFBeUQ7QUFBaEQsZ0RBQUEsZ0JBQWdCLENBQUE7QUFFekIsSUFBSSxNQUEyQixDQUFDO0FBRWhDLE1BQU0sTUFBTyxTQUFRLCtCQUFjO0lBRWpDLFlBQW9CLEdBQVcsRUFBRSxJQUFpQjtRQUNoRCxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFETSxRQUFHLEdBQUgsR0FBRyxDQUFRO0lBRTlCLENBQUM7SUFFRixHQUFHLENBQUMsTUFBZ0MsRUFDbEMsT0FBb0IsRUFDcEIsWUFBcUM7UUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzVDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsSUFBSSxDQUFDLEdBQVk7SUFDL0IsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1FBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztLQUN2QztJQUNELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBTEQsb0JBS0M7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLE9BQU8sQ0FBQyxHQUFXLEVBQ2pDLG1CQUF5QztJQUN6QyxNQUFNLFdBQVcsR0FBRyw0Q0FBdUIsQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2RSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3RDLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFMRCwwQkFLQyJ9