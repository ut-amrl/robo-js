"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This is the entrypoint for stopify-full.bundle.js. A page that includes
 * this entrypoint can compile programs in the browser.
 */
const babylon = require("babylon");
const abstractRunner_1 = require("../runtime/abstractRunner");
const compiler_1 = require("../compiler/compiler");
const check_compiler_opts_1 = require("@stopify/continuations/dist/src/compiler/check-compiler-opts");
const check_runtime_opts_1 = require("../runtime/check-runtime-opts");
const continuations_1 = require("@stopify/continuations");
// We need to provide these for stopify-continuations
__export(require("@stopify/continuations-runtime/dist/src/runtime/runtime"));
__export(require("@stopify/continuations/dist/src/runtime/implicitApps"));
var cannotCapture_1 = require("@stopify/continuations/dist/src/common/cannotCapture");
exports.knownBuiltIns = cannotCapture_1.knownBuiltIns;
const compiler = require("../stopify/compileFunction");
exports.compiler = compiler;
let runner;
function copyCompilerOpts(compileOpts) {
    return {
        compileFunction: compileOpts.compileFunction,
        getters: compileOpts.getters,
        debug: compileOpts.debug,
        captureMethod: compileOpts.captureMethod,
        newMethod: compileOpts.newMethod,
        es: compileOpts.es,
        jsArgs: compileOpts.jsArgs,
        requireRuntime: compileOpts.requireRuntime,
        sourceMap: compileOpts.sourceMap,
        onDone: compileOpts.onDone,
        eval2: compileOpts.eval2,
        compileMode: compileOpts.compileMode
    };
}
class Runner extends abstractRunner_1.AbstractRunner {
    constructor(code, compilerOpts, runtimeOpts) {
        super(runtimeOpts);
        this.code = code;
        this.evalOpts = copyCompilerOpts(compilerOpts);
        this.evalOpts.eval2 = true;
    }
    run(onDone, onYield, onBreakpoint) {
        this.runInit(onDone, onYield, onBreakpoint);
        eval.call(global, this.code);
    }
    evalAsyncFromAst(ast, onDone) {
        const stopifiedCode = compiler_1.compileFromAst(ast, this.evalOpts);
        this.eventMode = abstractRunner_1.EventProcessingMode.Running;
        this.continuationsRTS.runtime(eval(stopifiedCode), onDone);
    }
    evalAsync(src, onDone) {
        this.evalAsyncFromAst(babylon.parse(src).program, onDone);
    }
}
/**
 * Called by the stopified program to get suspend() and other functions.
 */
function init(rts) {
    if (runner === undefined) {
        throw new Error('stopify not called');
    }
    return runner.init(rts);
}
exports.init = init;
function stopifyLocallyFromAst(src, sourceMap, optionalCompileOpts, optionalRuntimeOpts) {
    try {
        const compileOpts = check_compiler_opts_1.checkAndFillCompilerOpts(optionalCompileOpts || {}, sourceMap);
        const runtimeOpts = check_runtime_opts_1.checkAndFillRuntimeOpts(optionalRuntimeOpts || {});
        const stopifiedCode = compiler_1.compileFromAst(src, compileOpts);
        runner = new Runner(stopifiedCode, compileOpts, runtimeOpts);
        return runner;
    }
    catch (exn) {
        return { kind: 'error', exception: exn };
    }
}
exports.stopifyLocallyFromAst = stopifyLocallyFromAst;
/**
 * Control the execution of a pre-compiled program.
 *
 * @param url URL of a pre-compiled program
 * @param opts runtime settings
 */
function stopifyLocally(src, optionalCompileOpts, optionalRuntimeOpts) {
    return stopifyLocallyFromAst(babylon.parse(src).program, continuations_1.getSourceMap(src), optionalCompileOpts, optionalRuntimeOpts);
}
exports.stopifyLocally = stopifyLocally;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZW50cnlwb2ludHMvY29tcGlsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O0dBR0c7QUFDSCxtQ0FBbUM7QUFJbkMsOERBQWdGO0FBQ2hGLG1EQUFzRDtBQUN0RCxzR0FBd0c7QUFDeEcsc0VBQXdFO0FBQ3hFLDBEQUFzRDtBQUV0RCxxREFBcUQ7QUFDckQsNkVBQXdFO0FBQ3hFLDBFQUFxRTtBQUNyRSxzRkFBcUY7QUFBNUUsd0NBQUEsYUFBYSxDQUFBO0FBSXRCLHVEQUF1RDtBQUM5Qyw0QkFBUTtBQUVqQixJQUFJLE1BQTJCLENBQUM7QUFFaEMsU0FBUyxnQkFBZ0IsQ0FBQyxXQUF5QjtJQUNqRCxPQUFPO1FBQ0wsZUFBZSxFQUFFLFdBQVcsQ0FBQyxlQUFlO1FBQzVDLE9BQU8sRUFBRSxXQUFXLENBQUMsT0FBTztRQUM1QixLQUFLLEVBQUUsV0FBVyxDQUFDLEtBQUs7UUFDeEIsYUFBYSxFQUFFLFdBQVcsQ0FBQyxhQUFhO1FBQ3hDLFNBQVMsRUFBRSxXQUFXLENBQUMsU0FBUztRQUNoQyxFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUU7UUFDbEIsTUFBTSxFQUFFLFdBQVcsQ0FBQyxNQUFNO1FBQzFCLGNBQWMsRUFBRSxXQUFXLENBQUMsY0FBYztRQUMxQyxTQUFTLEVBQUUsV0FBVyxDQUFDLFNBQVM7UUFDaEMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxNQUFNO1FBQzFCLEtBQUssRUFBRSxXQUFXLENBQUMsS0FBSztRQUN4QixXQUFXLEVBQUUsV0FBVyxDQUFDLFdBQVc7S0FDckMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLE1BQU8sU0FBUSwrQkFBYztJQUlqQyxZQUFvQixJQUFZLEVBQzlCLFlBQTBCLEVBQzFCLFdBQXdCO1FBQ3hCLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUhELFNBQUksR0FBSixJQUFJLENBQVE7UUFJOUIs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