"use strict";
/**
 * This module transforms programs to use `$S.g` as the global object. We use
 * the following algorithm:
 *
 * 1. At the top-level, transform `var x = e` into `$S.g.x = e`.
 * 2. At the start of the program, insert the statement `$S.g.f = f`
 *    for each top-level `function f(...) { ... }`.  i.e., function declarations
 *    are still lifted as expected.
 * 3. Track the set of identifiers bound at non-global scopes.
 * 4. If `x` is a non-binding occurrence of an identifier that isn't in the
 *    set of identifiers tracked in Step 3, transform `x` into `$S.g.x`.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const t = require("babel-types");
exports.$S = t.identifier('$S');
/** Produces the statement `$S.g.name = expr`. */
function setGlobal(global, name, expr) {
    return t.expressionStatement(t.assignmentExpression('=', t.memberExpression(global, name, false), expr));
}
function visitId(path, state) {
    if (path.node.name === exports.$S.name ||
        state.boundIds.has(path.node.name)) {
        return;
    }
    const newNode = t.memberExpression(state.opts.global, path.node, false);
    if (path.node.mark) {
        newNode.mark = path.node.mark;
    }
    path.replaceWith(newNode);
    path.skip();
}
const visitor = {
    Program(path, state) {
        state.boundIds = new Set(['arguments']);
        state.boundIdStack = [];
        state.programBody = path.node.body;
    },
    VariableDeclaration: {
        enter(path, state) {
            const isGlobal = state.boundIdStack.length === 0;
            if (!isGlobal) {
                return;
            }
            const nodes = [];
            for (const declarator of path.node.declarations) {
                if (declarator.id.type !== 'Identifier') {
                    throw new Error(`Stopify does not support patterns, found
                           ${declarator.id.type}`);
                }
                if (declarator.init === null) {
                    continue;
                }
                nodes.push(t.expressionStatement(t.assignmentExpression('=', declarator.id, declarator.init)));
            }
            path.replaceWithMultiple(nodes);
        }
    },
    FunctionDeclaration(path, state) {
        // NOTE(arjun): This kind of path traversal may slow down Stopify.
        // A better approach may to be maintain a stack.
        const isGlobal = state.boundIdStack.length === 0;
        if (!isGlobal) {
            return;
        }
        state.programBody.unshift(setGlobal(state.opts.global, path.node.id, path.node.id));
    },
    // Track the set of identifiers bound at all scopes, *except* for Program.
    Scope: {
        enter(path, state) {
            if (path.node.type === 'Program') {
                return;
            }
            state.boundIdStack.push(state.boundIds);
            const newIds = Object.keys(path.scope.bindings);
            const oldIds = state.boundIds.values();
            state.boundIds = new Set([...newIds, ...oldIds]);
        },
        exit(path, state) {
            if (path.node.type === 'Program') {
                return;
            }
            state.boundIds = state.boundIdStack.pop();
        }
    },
    BindingIdentifier: {
        exit(path, state) {
            // This is *not* a binding occurence! The Babel AST is wrong.
            if (path.parent.type !== 'AssignmentExpression') {
                return;
            }
            visitId(path, state);
        }
    },
    // Transforms non-binding occurrences of identifiers that are in the
    // set of identifiers tracked above.
    ReferencedIdentifier: {
        exit(path, state) {
            // The following three clauses only exist because the Babel AST treats
            // labels as identifiers.
            if (path.parent.type === 'ContinueStatement' ||
                path.parent.type === 'BreakStatement' ||
                path.parent.type === 'LabelledStatement') {
                return;
            }
            //`arguments` is a special keyword that is implicitly defined within
            //function scopes.
            if (path.node.name === 'arguments') {
                return;
            }
            visitId(path, state);
        }
    },
    // Transforms calls to global functions f(x ...) to f.call(void 0, x ...).
    // Without this step, the call would turn into $S.g.f(x ...), which binds
    // this to $S.g within the body of f. Stopify tries to implement strict-mode,
    // so this would be a bad thing.
    CallExpression(path, state) {
        const fun = path.node.callee;
        if (!(fun.type === 'Identifier' && !state.boundIds.has(fun.name))) {
            return;
        }
        // Calling a global function. T
        path.node.callee = t.memberExpression(path.node.callee, t.identifier('call'), false);
        path.node.arguments = [t.unaryExpression('void', t.numericLiteral(0)),
            ...path.node.arguments];
    }
};
function plugin() {
    return { visitor: visitor };
}
exports.plugin = plugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlR2xvYmFsT2JqZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMvdXNlR2xvYmFsT2JqZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7QUFFSCxpQ0FBaUM7QUFHcEIsUUFBQSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQVlyQyxpREFBaUQ7QUFDakQsU0FBUyxTQUFTLENBQUMsTUFBb0IsRUFBRSxJQUFrQixFQUFFLElBQWtCO0lBQzdFLE9BQU8sQ0FBQyxDQUFDLG1CQUFtQixDQUMxQixDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxFQUN4QixDQUFDLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsRUFDdkMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNiLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxJQUE0QixFQUFFLEtBQVE7SUFDckQsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxVQUFFLENBQUMsSUFBSTtRQUMxQixLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3RDLE9BQU87S0FDUjtJQUVELE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXhFLElBQUssSUFBSSxDQUFDLElBQVksQ0FBQyxJQUFJLEVBQUU7UUFDMUIsT0FBZSxDQUFDLElBQUksR0FBSSxJQUFJLENBQUMsSUFBWSxDQUFDLElBQUksQ0FBQztLQUNqRDtJQUVELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2QsQ0FBQztB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