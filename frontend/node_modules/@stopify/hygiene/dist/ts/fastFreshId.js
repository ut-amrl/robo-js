"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("@stopify/util");
const t = require("babel-types");
const assert = require("assert");
const trie = require('trie'); // NOTE(arjun): No @types on 08/28/2017
let isInitialized = false;
// We populate this trie will all the identifiers in the program.
let prefixes = new trie.Trie();
const known = new Map();
// NOTE(arjun): the Visitor type does not have ReferencedIdentifier
// and BindingIdentifier on 08/28/2017.
const visitor = {
    ReferencedIdentifier(path) {
        prefixes.addWord(path.node.name);
    },
    BindingIdentifier(path) {
        prefixes.addWord(path.node.name);
    }
};
function plugin() {
    return { visitor: visitor };
}
exports.plugin = plugin;
function init(path) {
    known.clear();
    util_1.transformFromAst(path, [plugin]);
    isInitialized = true;
}
exports.init = init;
function reset() {
    prefixes = new trie.Trie();
    isInitialized = false;
}
exports.reset = reset;
function fresh(base) {
    assert(isInitialized, 'init() must be applied before fresh()');
    const k = known.get(base);
    if (typeof k !== 'undefined') {
        const x = k.newBase + String(k.i);
        k.i = k.i + 1;
        return t.identifier(x);
    }
    let j = 0;
    let newBase = base;
    while (prefixes.isValidPrefix(newBase)) {
        newBase = newBase + String(j);
        j = j + 1;
    }
    known.set(base, { newBase: newBase, i: 1 });
    return t.identifier(newBase + String(0));
}
exports.fresh = fresh;
function nameExprBefore(path, expr, base) {
    if (t.isIdentifier(expr)) {
        return expr;
    }
    const x = fresh(base || "x");
    path.insertBefore(t.variableDeclaration('let', [t.variableDeclarator(x, expr)]));
    return x;
}
exports.nameExprBefore = nameExprBefore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdEZyZXNoSWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90cy9mYXN0RnJlc2hJZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBLHdDQUFpRDtBQUNqRCxpQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLHVDQUF1QztBQUVyRSxJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFFMUIsaUVBQWlFO0FBQ2pFLElBQUksUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBTy9CLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxFQUFpQixDQUFDO0FBRXZDLG1FQUFtRTtBQUNuRSx1Q0FBdUM7QUFDdkMsTUFBTSxPQUFPLEdBQUc7SUFDZCxvQkFBb0IsQ0FBQyxJQUE0QjtRQUMvQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNELGlCQUFpQixDQUFDLElBQTRCO1FBQzVDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0NBQ0YsQ0FBQztBQUVGLFNBQWdCLE1BQU07SUFDcEIsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUM5QixDQUFDO0FBRkQsd0JBRUM7QUFFRCxTQUFnQixJQUFJLENBQUMsSUFBc0I7SUFDekMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2QsdUJBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLENBQUM7QUFKRCxvQkFJQztBQUVELFNBQWdCLEtBQUs7SUFDbkIsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDeEIsQ0FBQztBQUhELHNCQUdDO0FBRUQsU0FBZ0IsS0FBSyxDQUFDLElBQVk7SUFDaEMsTUFBTSxDQUFDLGFBQWEsRUFBRSx1Q0FBdUMsQ0FBQyxDQUFDO0lBRS9ELE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsSUFBSSxPQUFPLENBQUMsS0FBSyxXQUFXLEVBQUU7UUFDNUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZCxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDeEI7SUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDbkIsT0FBTyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3RDLE9BQU8sR0FBRyxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ1g7SUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBbEJELHNCQWtCQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxJQUFzQixFQUNuRCxJQUFrQixFQUFFLElBQWE7SUFDakMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3hCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRCxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLElBQUksQ0FBQyxZQUFZLENBQ2YsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBVEQsd0NBU0MifQ==