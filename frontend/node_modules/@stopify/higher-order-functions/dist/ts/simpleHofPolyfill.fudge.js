"use strict";
// Do not directly use this file. We stopify and webpack this file for each
// type of transformation.

const $__C = stopify.compiler;
var $__T = stopify;
var $__R = $__T.newRTS("fudge");
var handleNew, array_sort, stopifyArrayPrototype, stopifyArray, fun0, fun1, fun2, fun3, fun4, fun5, fun6, fun7, fun8, fun9, fun10, fun11;
if ($__R.mode) handleNew = {
    box: undefined
};
if ($__R.mode) array_sort = {
    box: undefined
};
if ($__R.mode) stopifyArrayPrototype = {
    box: undefined
};
if ($__R.mode) stopifyArray = {
    box: undefined
};
if ($__R.mode) handleNew.box = function fun12(constr, ...args) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [result00, obj00, app1, app0] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [result00, obj00, app1, app0];
    }

    var restoreNextFrame = () => {
        return fun12.call(this, constr, ...args);
    };

    var app0, app1, obj00, result00;
    if ($__R.mode) app0 = $__C.knownBuiltIns.includes(constr);

    if ($__R.mode && app0 || !$__R.mode && target === 1) {
        if ($__R.mode) {
            app1 = new constr(...args);
            $__R.remainingStack++;
        }

        return app1;
    }

    if ($__R.mode) obj00 = Object.create(constr.prototype);
    result00 = constr.apply(obj00, args);
    if ($__R.mode) $__R.remainingStack++;
    return typeof result00 === "object" ? result00 : obj00;
    $__R.remainingStack++;
};
if ($__R.mode) array_sort.box = function fun23(o, comparator) {
    "use strict";

    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [compact, compactSparse, compactSlow, length, stringComparator, bucketSort, stringSort, min, comparatorSort, mergeSort, app7, app8, merge, app9, array] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [compact, compactSparse, compactSlow, length, stringComparator, bucketSort, stringSort, min, comparatorSort, mergeSort, app7, app8, merge, app9, array];
    }

    var restoreNextFrame = () => {
        return fun23.call(this, o, comparator);
    };

    var min, stringComparator, compactSparse, compactSlow, compact, merge, mergeSort, bucketSort, comparatorSort, stringSort, array, length, app7, app8, app9;

    if ($__R.mode) {
        min = {
            box: undefined
        };
        stringComparator = {
            box: undefined
        };
        compactSparse = {
            box: undefined
        };
        compactSlow = {
            box: undefined
        };
        compact = {
            box: undefined
        };
        merge = {
            box: undefined
        };
        mergeSort = {
            box: undefined
        };
        bucketSort = {
            box: undefined
        };
        comparatorSort = {
            box: undefined
        };
        stringSort = {
            box: undefined
        };

        min.box = function fun13(a, b) {
            return a < b ? a : b;
        };

        stringComparator.box = function fun14(a, b) {
            var target = null;
            var $frame = null;
            $__R.remainingStack--;

            if (!$__R.mode) {
                $frame = $__R.stack.pop();
                target = $frame.index;
                [aCharCode, bCharCode, length, aLength, bLength, i, aString, bString] = $frame.locals;
            }

            function captureLocals(frame) {
                frame.locals = [aCharCode, bCharCode, length, aLength, bLength, i, aString, bString];
            }

            var restoreNextFrame = () => {
                return fun14.call(this, a, b);
            };

            var aString, bString, aLength, bLength, length, i, aCharCode, bCharCode;

            if ($__R.mode) {
                aString = a.string;
                bString = b.string;
                aLength = aString.length;
                bLength = bString.length;
                length = min.box(aLength, bLength);
                i = 0;
            }

            if ($__R.mode || !$__R.mode && (target === 6 || target === 5)) loop_break0: while ($__R.mode && i < length || !$__R.mode && (target === 6 || target === 5)) {
                if ($__R.mode || !$__R.mode && (target === 6 || target === 5)) loop_continue0: {
                    aCharCode = aString.charCodeAt(i);
                    bCharCode = bString.charCodeAt(i);

                    if ($__R.mode && aCharCode === bCharCode) {
                        break loop_continue0;
                    }

                    if ($__R.mode) $__R.remainingStack++;

                    return aCharCode - bCharCode;
                }
                if ($__R.mode) ++i;
            }
            if ($__R.mode) $__R.remainingStack++;

            return aLength - bLength;
            $__R.remainingStack++;
        };

        compactSparse.box = function fun15(array, dst, src, length) {
            var target = null;
            var $frame = null;
            $__R.remainingStack--;

            if (!$__R.mode) {
                $frame = $__R.stack.pop();
                target = $frame.index;
                [i00, i, value, index, propertyNames, obj, seen, valueCount, undefinedCount] = $frame.locals;
            }

            function captureLocals(frame) {
                frame.locals = [i00, i, value, index, propertyNames, obj, seen, valueCount, undefinedCount];
            }

            var restoreNextFrame = () => {
                return fun15.call(this, array, dst, src, length);
            };

            var seen, valueCount, undefinedCount, i00, obj, propertyNames, i, index, value, i;

            if ($__R.mode) {
                seen = {};
                valueCount = 0;
                undefinedCount = 0;
                i00 = dst;

                loop_break1: while ($__R.mode && i00 < src) {
                    if ($__R.mode) {
                        loop_continue1: {
                            if ($__R.mode) delete array[i00];
                        }

                        ++i00;
                    }
                }

                obj = array;
            }

            if ($__R.mode || !$__R.mode && (target === 8 || target === 7)) loop_break2: while ($__R.mode && obj || !$__R.mode && (target === 8 || target === 7)) {
                if ($__R.mode || !$__R.mode && target === 7) loop_continue2: {
                    if ($__R.mode) {
                        propertyNames = Object.getOwnPropertyNames(obj);
                        i = 0;

                        loop_break3: while ($__R.mode && i < propertyNames.length) {
                            if ($__R.mode) {
                                loop_continue4: {
                                    if ($__R.mode) index = propertyNames[i];

                                    if ($__R.mode && index < length) {
                                        // Exclude non-numeric properties and properties past length.
                                        if ($__R.mode && seen[index]) {
                                            // Exclude duplicates.
                                            break loop_continue4;
                                        }

                                        if ($__R.mode) {
                                            seen[index] = 1;
                                            value = array[index];

                                            delete array[index];
                                        }

                                        if ($__R.mode && value === undefined) {
                                            if ($__R.mode) ++undefinedCount;
                                            break loop_continue4;
                                        }

                                        if ($__R.mode) array[valueCount++] = value;
                                    }
                                }

                                ++i;
                            }
                        }
                    }
                }
                if ($__R.mode) obj = Object.getPrototypeOf(obj);
            }

            if ($__R.mode) {
                i = valueCount;

                loop_break4: while ($__R.mode && i < valueCount + undefinedCount) {
                    if ($__R.mode) {
                        loop_continue3: {
                            if ($__R.mode) array[i] = undefined;
                        }

                        ++i;
                    }
                }

                $__R.remainingStack++;
            }

            return valueCount;
            $__R.remainingStack++;
        };

        compactSlow.box = function fun16(array, length) {
            var target = null;
            var $frame = null;
            $__R.remainingStack--;

            if (!$__R.mode) {
                $frame = $__R.stack.pop();
                target = $frame.index;
                [src, dst, i, holeCount, value, valueCount, undefinedCount] = $frame.locals;
            }

            function captureLocals(frame) {
                frame.locals = [src, dst, i, holeCount, value, valueCount, undefinedCount];
            }

            var restoreNextFrame = () => {
                return fun16.call(this, array, length);
            };

            var holeCount, dst, src, value, valueCount, undefinedCount, i, i;

            if ($__R.mode) {
                holeCount = 0;
                dst = 0, src = 0, void 0;

                loop_break5: while ($__R.mode && src < length) {
                    if ($__R.mode) {
                        loop_continue5: {
                            if ($__R.mode && !(src in array)) {
                                if ($__R.mode) ++holeCount;

                                if ($__R.mode && holeCount < 256) {
                                    break loop_continue5;
                                }

                                if ($__R.mode) $__R.remainingStack++;
                                if ($__R.mode) return compactSparse.box(array, dst, src, length);else ;
                            }

                            if ($__R.mode) value = array[src];

                            if ($__R.mode && value === undefined) {
                                break loop_continue5;
                            }

                            if ($__R.mode) array[dst++] = value;
                        }

                        ++src;
                    }
                }

                valueCount = dst;
                undefinedCount = length - valueCount - holeCount;
                i = valueCount;

                loop_break6: while ($__R.mode && i < valueCount + undefinedCount) {
                    if ($__R.mode) {
                        loop_continue6: {
                            if ($__R.mode) array[i] = undefined;
                        }

                        ++i;
                    }
                }

                i = valueCount + undefinedCount;

                loop_break7: while ($__R.mode && i < length) {
                    if ($__R.mode) {
                        loop_continue7: {
                            if ($__R.mode) delete array[i];
                        }

                        ++i;
                    }
                }

                $__R.remainingStack++;
            }

            return valueCount;
            $__R.remainingStack++;
        };

        compact.box = function fun17(array, length) {
            var target = null;
            var $frame = null;
            $__R.remainingStack--;

            if (!$__R.mode) {
                $frame = $__R.stack.pop();
                target = $frame.index;
                [i] = $frame.locals;
            }

            function captureLocals(frame) {
                frame.locals = [i];
            }

            var restoreNextFrame = () => {
                return fun17.call(this, array, length);
            };

            var i;

            if ($__R.mode) {
                i = 0;

                loop_break8: while ($__R.mode && i < array.length) {
                    if ($__R.mode) {
                        loop_continue8: {
                            if ($__R.mode && array[i] === undefined) {
                                if ($__R.mode) $__R.remainingStack++;
                                if ($__R.mode) return compactSlow.box(array, length);else ;
                            }
                        }

                        ++i;
                    }
                }

                $__R.remainingStack++;
            }

            return length;
            $__R.remainingStack++;
        };

        merge.box = function fun18(dst, src, srcIndex, srcEnd, width, comparator) {
            var target = null;
            var $frame = null;
            $__R.remainingStack--;

            if (!$__R.mode) {
                $frame = $__R.stack.pop();
                target = $frame.index;
                [comparisonResult00, left, dstIndex, leftEnd, right, rightEnd] = $frame.locals;
            }

            function captureLocals(frame) {
                frame.locals = [comparisonResult00, left, dstIndex, leftEnd, right, rightEnd];
            }

            var restoreNextFrame = () => {
                return fun18.call(this, dst, src, srcIndex, srcEnd, width, comparator);
            };

            var left, leftEnd, right, rightEnd, dstIndex, comparisonResult00;

            if ($__R.mode) {
                left = srcIndex;
                leftEnd = min.box(left + width, srcEnd);
                right = leftEnd;
                rightEnd = min.box(right + width, srcEnd);
                dstIndex = left;
            }

            if ($__R.mode || !$__R.mode && target === 13) loop_break9: while ($__R.mode && dstIndex < rightEnd || !$__R.mode && target === 13) {
                if ($__R.mode || !$__R.mode && target === 13) loop_continue9: {
                    if ($__R.mode && right < rightEnd || !$__R.mode && target === 13) {
                        if ($__R.mode && left >= leftEnd) {
                            if ($__R.mode) dst[dstIndex] = src[right++];
                            break loop_continue9;
                        }

                        comparisonResult00 = comparator(src[right], src[left]);

                        if ($__R.mode && (typeof comparisonResult00 === "boolean" && !comparisonResult00 || comparisonResult00 < 0)) {
                            if ($__R.mode) dst[dstIndex] = src[right++];
                            break loop_continue9;
                        }
                    }

                    if ($__R.mode) dst[dstIndex] = src[left++];
                }
                if ($__R.mode) ++dstIndex;
            }
            $__R.remainingStack++;
        };

        mergeSort.box = function fun19(array, valueCount, comparator) {
            var target = null;
            var $frame = null;
            $__R.remainingStack--;

            if (!$__R.mode) {
                $frame = $__R.stack.pop();
                target = $frame.index;
                [buffer, src, dst, width, i, srcIndex, app2, tmp] = $frame.locals;
            }

            function captureLocals(frame) {
                frame.locals = [buffer, src, dst, width, i, srcIndex, app2, tmp];
            }

            var restoreNextFrame = () => {
                return fun19.call(this, array, valueCount, comparator);
            };

            var buffer, dst, src, width, srcIndex, app2, tmp, i;

            if ($__R.mode) {
                buffer = [];

                buffer.length = valueCount;
                dst = buffer;
                src = array;
                width = 1;
            }

            if ($__R.mode || !$__R.mode && target === 14) loop_break11: while ($__R.mode && width < valueCount || !$__R.mode && target === 14) {
                if ($__R.mode || !$__R.mode && target === 14) loop_continue10: {
                    if ($__R.mode) srcIndex = 0;
                    if ($__R.mode || !$__R.mode && target === 14) loop_break12: while ($__R.mode && srcIndex < valueCount || !$__R.mode && target === 14) {
                        if ($__R.mode || !$__R.mode && target === 14) loop_continue12: {
                            app2 = merge.box(dst, src, srcIndex, valueCount, width, comparator);
                        }
                        if ($__R.mode) srcIndex += 2 * width;
                    }

                    if ($__R.mode) {
                        tmp = src;

                        src = dst;
                        dst = tmp;
                    }
                }
                if ($__R.mode) width *= 2;
            }

            if ($__R.mode && src !== array) {
                if ($__R.mode) {
                    i = 0;

                    loop_break10: while ($__R.mode && i < valueCount) {
                        if ($__R.mode) {
                            loop_continue11: {
                                if ($__R.mode) array[i] = src[i];
                            }

                            i++;
                        }
                    }
                }
            }

            $__R.remainingStack++;
        };

        bucketSort.box = function fun20(array, dst, bucket, depth) {
            var target = null;
            var $frame = null;
            $__R.remainingStack--;

            if (!$__R.mode) {
                $frame = $__R.stack.pop();
                target = $frame.index;
                [c, i, buckets, string, entry, app3, app4] = $frame.locals;
            }

            function captureLocals(frame) {
                frame.locals = [c, i, buckets, string, entry, app3, app4];
            }

            var restoreNextFrame = () => {
                return fun20.call(this, array, dst, bucket, depth);
            };

            var app3, i, buckets, i, entry, string, c, i, app4;

            if ($__R.mode && (bucket.length < 32 || depth > 32) || !$__R.mode && target === 15) {
                app3 = mergeSort.box(bucket, bucket.length, stringComparator.box);

                if ($__R.mode) {
                    i = 0;

                    loop_break13: while ($__R.mode && i < bucket.length) {
                        if ($__R.mode) {
                            loop_continue13: {
                                if ($__R.mode) array[dst++] = bucket[i].value;
                            }

                            ++i;
                        }
                    }

                    $__R.remainingStack++;
                }

                return dst;
            }

            if ($__R.mode) {
                buckets = [];
                i = 0;
            }

            if ($__R.mode || !$__R.mode && target === 16) loop_break14: while ($__R.mode && i < bucket.length || !$__R.mode && target === 16) {
                if ($__R.mode || !$__R.mode && target === 16) loop_continue14: {
                    if ($__R.mode) {
                        entry = bucket[i];
                        string = entry.string;
                    }

                    if ($__R.mode && string.length === depth) {
                        if ($__R.mode) array[dst++] = entry.value;
                        break loop_continue14;
                    }

                    c = string.charCodeAt(depth);

                    if ($__R.mode && !buckets[c]) {
                        if ($__R.mode) buckets[c] = [];
                    }

                    if ($__R.mode) buckets[c][buckets[c].length] = entry;
                }
                if ($__R.mode) ++i;
            }
            if ($__R.mode) i = 0;
            if ($__R.mode || !$__R.mode && target === 17) loop_break15: while ($__R.mode && i < buckets.length || !$__R.mode && target === 17) {
                if ($__R.mode || !$__R.mode && target === 17) loop_continue15: {
                    if ($__R.mode && !buckets[i]) {
                        break loop_continue15;
                    }

                    app4 = bucketSort.box(array, dst, buckets[i], depth + 1);
                    if ($__R.mode) dst = app4;
                }
                if ($__R.mode) ++i;
            }
            if ($__R.mode) $__R.remainingStack++;

            return dst;
            $__R.remainingStack++;
        };

        comparatorSort.box = function fun21(array, length, comparator) {
            var target = null;
            var $frame = null;
            $__R.remainingStack--;

            if (!$__R.mode) {
                $frame = $__R.stack.pop();
                target = $frame.index;
                [app5, valueCount] = $frame.locals;
            }

            function captureLocals(frame) {
                frame.locals = [app5, valueCount];
            }

            var restoreNextFrame = () => {
                return fun21.call(this, array, length, comparator);
            };

            var valueCount, app5;
            valueCount = compact.box(array, length);
            app5 = mergeSort.box(array, valueCount, comparator);
            $__R.remainingStack++;
        };

        stringSort.box = function fun22(array, length) {
            var target = null;
            var $frame = null;
            $__R.remainingStack--;

            if (!$__R.mode) {
                $frame = $__R.stack.pop();
                target = $frame.index;
                [app6, i, strings, valueCount] = $frame.locals;
            }

            function captureLocals(frame) {
                frame.locals = [app6, i, strings, valueCount];
            }

            var restoreNextFrame = () => {
                return fun22.call(this, array, length);
            };

            var valueCount, strings, i, app6;
            valueCount = compact.box(array, length);

            if ($__R.mode) {
                strings = new Array(valueCount);
                i = 0;

                loop_break16: while ($__R.mode && i < valueCount) {
                    if ($__R.mode) {
                        loop_continue16: {
                            if ($__R.mode) strings[i] = { string: array[i], value: array[i] };
                        }

                        ++i;
                    }
                }
            }

            app6 = bucketSort.box(array, 0, strings, 0);
            $__R.remainingStack++;
        };

        array = o;
        length = array.length >>> 0;
    }

    // For compatibility with Firefox and Chrome, do nothing observable
    // to the target array if it has 0 or 1 sortable properties.
    if ($__R.mode && length < 2) {
        if ($__R.mode) $__R.remainingStack++;

        return array;
    }

    if ($__R.mode && typeof comparator === "function" || !$__R.mode && target === 23) {
        app7 = comparatorSort.box(array, length, comparator);
    } else if ($__R.mode || !$__R.mode && (target === 25 || target === 24)) {
        if ($__R.mode && (comparator === null || comparator === undefined) || !$__R.mode && target === 24) {
            app8 = stringSort.box(array, length);
        } else if ($__R.mode || !$__R.mode && target === 25) {
            if ($__R.mode) {
                app9 = new TypeError("Array.prototype.sort requires the comparsion function be a function or undefined");
                $__R.pushTrace("Line 189: in array_sort");
            }

            throw app9;
        }
    }

    if ($__R.mode) $__R.remainingStack++;

    return array;
    $__R.remainingStack++;
};
if ($__R.mode) stopifyArray.box = function fun24(arr) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [app10] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [app10];
    }

    var restoreNextFrame = () => {
        return fun24.call(this, arr);
    };

    var app10;
    app10 = Reflect.setPrototypeOf(arr, stopifyArrayPrototype.box);
    // @stopify flat

    if ($__R.mode) $__R.remainingStack++;

    return arr;
    $__R.remainingStack++;
};
if ($__R.mode) Object.defineProperty(exports, "__esModule", { value: true });
if ($__R.mode) fun0 = function funExpr0(f) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [app11, arg00, result01, i01] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [app11, arg00, result01, i01];
    }

    var restoreNextFrame = () => {
        return funExpr0.call(this, f);
    };

    var result01, i01, arg00, app11;

    if ($__R.mode && arguments.length !== 1) {
        if ($__R.mode) $__R.pushTrace("Line 197: in (anonymous function)");

        throw new Error(`.map requires 1 argument`);
    }

    if ($__R.mode) {
        result01 = [];
        i01 = 0;
    }

    if ($__R.mode || !$__R.mode && (target === 30 || target === 29)) loop_break17: while ($__R.mode && i01 < this.length || !$__R.mode && (target === 30 || target === 29)) {
        if ($__R.mode || !$__R.mode && (target === 30 || target === 29)) loop_continue17: {
            arg00 = f(this[i01]);
            app11 = result01.push(arg00);
        }
        if ($__R.mode) ++i01;
    }
    if ($__R.mode) $__R.remainingStack++;
    if ($__R.mode) return stopifyArray.box(result01);else ;
    $__R.remainingStack++;
};
if ($__R.mode) fun1 = function funExpr1(f) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [app13, app12, result02, i02] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [app13, app12, result02, i02];
    }

    var restoreNextFrame = () => {
        return funExpr1.call(this, f);
    };

    var result02, i02, app12, app13;

    if ($__R.mode && arguments.length !== 1) {
        if ($__R.mode) $__R.pushTrace("Line 207: in (anonymous function)");

        throw new Error(`.filter requires 1 argument`);
    }

    if ($__R.mode) {
        result02 = [];
        i02 = 0;
    }

    if ($__R.mode || !$__R.mode && (target === 34 || target === 33)) loop_break18: while ($__R.mode && i02 < this.length || !$__R.mode && (target === 34 || target === 33)) {
        if ($__R.mode || !$__R.mode && (target === 34 || target === 33)) loop_continue18: {
            app12 = f(this[i02]);

            if ($__R.mode && app12 || !$__R.mode && target === 34) {
                app13 = result02.push(this[i02]);
            }
        }
        if ($__R.mode) ++i02;
    }
    if ($__R.mode) $__R.remainingStack++;
    if ($__R.mode) return stopifyArray.box(result02);else ;
    $__R.remainingStack++;
};
if ($__R.mode) fun2 = function funExpr2(f, init) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [app14, i, acc, arrLen] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [app14, i, acc, arrLen];
    }

    var restoreNextFrame = () => {
        return funExpr2.call(this, f, init);
    };

    var arrLen, acc, i, app14;

    if ($__R.mode && arguments.length !== 2) {
        if ($__R.mode) $__R.pushTrace("Line 219: in (anonymous function)");

        throw new Error(`.reduceRight requires 2 arguments`);
    }

    if ($__R.mode) {
        arrLen = this.length;
        acc = init;
        i = arrLen - 1;
    }

    if ($__R.mode || !$__R.mode && target === 37) loop_break19: while ($__R.mode && i >= 0 || !$__R.mode && target === 37) {
        if ($__R.mode || !$__R.mode && target === 37) loop_continue19: {
            app14 = f(acc, this[i]);

            if ($__R.mode) {
                acc = app14;
                i = i - 1;
            }
        }
    }
    if ($__R.mode) $__R.remainingStack++;

    return acc;
    $__R.remainingStack++;
};
if ($__R.mode) fun3 = function funExpr3(f, init) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [app15, i, acc, arrLen] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [app15, i, acc, arrLen];
    }

    var restoreNextFrame = () => {
        return funExpr3.call(this, f, init);
    };

    var arrLen, acc, i, app15;

    if ($__R.mode && arguments.length !== 2) {
        if ($__R.mode) $__R.pushTrace("Line 232: in (anonymous function)");

        throw new Error(`.reduce requires 2 arguments`);
    }

    if ($__R.mode) {
        arrLen = this.length;
        acc = init;
        i = 0;
    }

    if ($__R.mode || !$__R.mode && target === 39) loop_break20: while ($__R.mode && i < arrLen || !$__R.mode && target === 39) {
        if ($__R.mode || !$__R.mode && target === 39) loop_continue20: {
            app15 = f(acc, this[i]);

            if ($__R.mode) {
                acc = app15;
                i = i + 1;
            }
        }
    }
    if ($__R.mode) $__R.remainingStack++;

    return acc;
    $__R.remainingStack++;
};
if ($__R.mode) fun4 = function funExpr4(pred) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [app16, l, i] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [app16, l, i];
    }

    var restoreNextFrame = () => {
        return funExpr4.call(this, pred);
    };

    var i, l, app16;

    if ($__R.mode && arguments.length !== 1) {
        if ($__R.mode) $__R.pushTrace("Line 245: in (anonymous function)");

        throw new Error(`.some requires 1 argument`);
    }

    if ($__R.mode) {
        i = 0;
        l = this.length;
    }

    if ($__R.mode || !$__R.mode && target === 41) loop_break21: while ($__R.mode && i < l || !$__R.mode && target === 41) {
        if ($__R.mode || !$__R.mode && target === 41) loop_continue21: {
            app16 = pred(this[i]);

            if ($__R.mode && app16) {
                if ($__R.mode) $__R.remainingStack++;

                return true;
            }

            if ($__R.mode) i = i + 1;
        }
    }
    if ($__R.mode) $__R.remainingStack++;

    return false;
    $__R.remainingStack++;
};
if ($__R.mode) fun5 = function funExpr5(pred) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [app17, l, i] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [app17, l, i];
    }

    var restoreNextFrame = () => {
        return funExpr5.call(this, pred);
    };

    var i, l, app17;

    if ($__R.mode && arguments.length !== 1) {
        if ($__R.mode) $__R.pushTrace("Line 259: in (anonymous function)");

        throw new Error(`.every requires 1 argument`);
    }

    if ($__R.mode) {
        i = 0;
        l = this.length;
    }

    if ($__R.mode || !$__R.mode && target === 43) loop_break22: while ($__R.mode && i < l || !$__R.mode && target === 43) {
        if ($__R.mode || !$__R.mode && target === 43) loop_continue22: {
            app17 = pred(this[i]);

            if ($__R.mode && !app17) {
                if ($__R.mode) $__R.remainingStack++;

                return false;
            }

            if ($__R.mode) i = i + 1;
        }
    }
    if ($__R.mode) $__R.remainingStack++;

    return true;
    $__R.remainingStack++;
};
if ($__R.mode) fun6 = function funExpr6(pred) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [app18, l, i] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [app18, l, i];
    }

    var restoreNextFrame = () => {
        return funExpr6.call(this, pred);
    };

    var i, l, app18;

    if ($__R.mode && arguments.length !== 1) {
        if ($__R.mode) $__R.pushTrace("Line 273: in (anonymous function)");

        throw new Error(`.find requires 1 argument`);
    }

    if ($__R.mode) {
        i = 0;
        l = this.length;
    }

    if ($__R.mode || !$__R.mode && target === 45) loop_break23: while ($__R.mode && i < l || !$__R.mode && target === 45) {
        if ($__R.mode || !$__R.mode && target === 45) loop_continue23: {
            app18 = pred(this[i]);

            if ($__R.mode && app18) {
                if ($__R.mode) $__R.remainingStack++;

                return this[i];
            }

            if ($__R.mode) i = i + 1;
        }
    }
    $__R.remainingStack++;
};
if ($__R.mode) fun7 = function funExpr7(pred) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [app19, l, i] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [app19, l, i];
    }

    var restoreNextFrame = () => {
        return funExpr7.call(this, pred);
    };

    var i, l, app19;

    if ($__R.mode && arguments.length !== 1) {
        if ($__R.mode) $__R.pushTrace("Line 286: in (anonymous function)");

        throw new Error(`.findIndex requires 1 argument`);
    }

    if ($__R.mode) {
        i = 0;
        l = this.length;
    }

    if ($__R.mode || !$__R.mode && target === 47) loop_break24: while ($__R.mode && i < l || !$__R.mode && target === 47) {
        if ($__R.mode || !$__R.mode && target === 47) loop_continue24: {
            app19 = pred(this[i]);

            if ($__R.mode && app19) {
                if ($__R.mode) $__R.remainingStack++;

                return i;
            }

            if ($__R.mode) i = i + 1;
        }
    }
    if ($__R.mode) $__R.remainingStack++;

    return -1;
    $__R.remainingStack++;
};
if ($__R.mode) fun8 = function method0(f) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [app20, l, i] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [app20, l, i];
    }

    var restoreNextFrame = () => {
        return method0.call(this, f);
    };

    var i, l, app20;

    if ($__R.mode && arguments.length !== 1) {
        if ($__R.mode) $__R.pushTrace("Line 301: in method0");

        throw new Error(`.forEach requires 1 argument`);
    }

    if ($__R.mode) {
        i = 0;
        l = this.length;
    }

    if ($__R.mode || !$__R.mode && target === 49) loop_break25: while ($__R.mode && i < l || !$__R.mode && target === 49) {
        if ($__R.mode || !$__R.mode && target === 49) loop_continue25: {
            app20 = f(this[i]);
            if ($__R.mode) i = i + 1;
        }
    }
    $__R.remainingStack++;
};
if ($__R.mode) fun9 = function funExpr8(comparator) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [arg01] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [arg01];
    }

    var restoreNextFrame = () => {
        return funExpr8.call(this, comparator);
    };

    var arg01;

    if ($__R.mode && arguments.length !== 1) {
        if ($__R.mode) $__R.pushTrace("Line 312: in (anonymous function)");

        throw new Error(`.sort requires 1 argument`);
    }

    arg01 = array_sort.box(this, comparator);
    if ($__R.mode) $__R.remainingStack++;
    if ($__R.mode) return stopifyArray.box(arg01);else ;
    $__R.remainingStack++;
};
if ($__R.mode) fun10 = function funExpr9(begin, end) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [arg02] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [arg02];
    }

    var restoreNextFrame = () => {
        return funExpr9.call(this, begin, end);
    };

    var arg02;

    if ($__R.mode && arguments.length !== 2) {
        if ($__R.mode) $__R.pushTrace("Line 318: in (anonymous function)");

        throw new Error(`.slice requires 2 arguments`);
    }

    if ($__R.mode && (begin < 0 || end > this.length)) {
        if ($__R.mode) $__R.pushTrace("Line 321: in (anonymous function)");

        throw new Error(`.slice requires begin and end range to be within array`);
    }

    arg02 = Array.prototype.slice.call(this, begin, end);
    if ($__R.mode) $__R.remainingStack++;
    if ($__R.mode) return stopifyArray.box(arg02);else ;
    $__R.remainingStack++;
};
if ($__R.mode) fun11 = function funExpr10(anotherArray) {
    var target = null;
    var $frame = null;
    $__R.remainingStack--;

    if (!$__R.mode) {
        $frame = $__R.stack.pop();
        target = $frame.index;
        [arg03] = $frame.locals;
    }

    function captureLocals(frame) {
        frame.locals = [arg03];
    }

    var restoreNextFrame = () => {
        return funExpr10.call(this, anotherArray);
    };

    var arg03;

    if ($__R.mode && arguments.length !== 1) {
        if ($__R.mode) $__R.pushTrace("Line 327: in (anonymous function)");

        throw new Error(`.concat requires 1 argument`);
    }

    arg03 = Array.prototype.concat.call(this, anotherArray);
    if ($__R.mode) $__R.remainingStack++;
    if ($__R.mode) return stopifyArray.box(arg03);else ;
    $__R.remainingStack++;
};
if ($__R.mode) stopifyArrayPrototype.box = {
    __proto__: Array.prototype,
    map: fun0,
    filter: fun1,
    reduceRight: fun2,
    reduce: fun3,
    some: fun4,
    every: fun5,
    find: fun6,
    findIndex: fun7,
    // NOTE(arjun): Ignores thisArg
    forEach: fun8,

    sort: fun9,
    slice: fun10,
    concat: fun11
};
if ($__R.mode) exports.stopifyArray = stopifyArray.box;