/**
 * Interface for an object that estimates elapsed time.
 */
export declare abstract class ElapsedTimeEstimator {
    /**
     * See 'elapsedTime' documentation.
     */
    abstract reset(): void;
    /** Produces an estimate of time elapsed, in milliseconds, since the last
     * application of 'reset' or since the object was created.
     */
    abstract elapsedTime(): any;
    /**
     * Clean up any necessary state. Called from the runtime's `onEnd` function.
     */
    cancel(): void;
}
export declare class ExactTimeEstimator extends ElapsedTimeEstimator {
    private last;
    constructor(last?: number);
    reset(): void;
    elapsedTime(): number;
}
export declare class CountdownTimeEstimator extends ElapsedTimeEstimator {
    private timePerElapsed;
    private i;
    constructor(timePerElapsed: number, i?: number);
    reset(): void;
    elapsedTime(): number;
}
export declare class SampleAverageTimeEstimator extends ElapsedTimeEstimator {
    private i;
    private last;
    private timePerElapsed;
    private countDownFrom;
    private countDown;
    private elapsedTimeCounter;
    constructor(i?: number, last?: number, timePerElapsed?: number, countDownFrom?: number, countDown?: number, elapsedTimeCounter?: number);
    elapsedTime(): number;
    reset(): void;
}
export declare class VelocityEstimator extends ElapsedTimeEstimator {
    resample: number;
    private i;
    private lastPosition;
    private velocityEstimate;
    private resampleTimespanEstimate;
    private countDown;
    private distance;
    constructor(resample: number, i?: number, lastPosition?: number, velocityEstimate?: number, resampleTimespanEstimate?: number, countDown?: number, distance?: number);
    elapsedTime(): number;
    reset(): void;
}
