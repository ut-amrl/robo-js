export declare type Binop = '+' | '-' | '*' | '/' | '&&' | '||' | '>' | '<' | '===';
export declare type Expr = {
    kind: 'boolean';
    value: boolean;
} | {
    kind: 'number';
    value: number;
} | {
    kind: 'variable';
    name: string;
} | {
    kind: 'operator';
    op: Binop;
    e1: Expr;
    e2: Expr;
};
export declare type Stmt = {
    kind: 'let';
    name: string;
    expression: Expr;
} | {
    kind: 'assignment';
    name: string;
    expression: Expr;
} | {
    kind: 'if';
    test: Expr;
    truePart: Stmt[];
    falsePart: Stmt[];
} | {
    kind: 'while';
    test: Expr;
    body: Stmt[];
} | {
    kind: 'print';
    expression: Expr;
};
export declare function bool(value: boolean): Expr;
export declare function number(value: number): Expr;
export declare function variable(name: string): Expr;
export declare function operator(op: Binop, e1: Expr, e2: Expr): Expr;
export declare function let_(name: string, expression: Expr): Stmt;
export declare function assignment(name: string, expression: Expr): Stmt;
export declare function if_(test: Expr, truePart: Stmt[], falsePart: Stmt[]): Stmt;
export declare function while_(test: Expr, body: Stmt[]): Stmt;
export declare function print(expression: Expr): Stmt;
