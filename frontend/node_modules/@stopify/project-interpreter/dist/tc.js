"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = require("immutable");
const result_1 = require("./result");
const result = require("./result");
function tcExpr(boundVars, expr) {
    if (expr.kind === 'number') {
        return result_1.ok(undefined);
    }
    else if (expr.kind === 'boolean') {
        return result_1.ok(undefined);
    }
    else if (expr.kind === 'variable') {
        if (boundVars.contains(expr.name)) {
            return result_1.ok(undefined);
        }
        else {
            return result_1.error(`variable ${expr.name} is not declared`);
        }
    }
    else if (expr.kind === 'operator') {
        return tcExpr(boundVars, expr.e1)
            .then(_ => tcExpr(boundVars, expr.e2));
    }
    else {
        return result_1.unreachable('unhandled case in tcExpr');
    }
}
function tcBlock(env, statements) {
    return result.foldLeft(tcStmt, env, statements);
}
// We return the environement because 'let' statements declare variables that
// are visible to the next statement.
function tcStmt(env, stmt) {
    const { bound, all } = env;
    if (stmt.kind === 'let') {
        const x = stmt.name;
        if (all.contains(x)) {
            return result_1.error(`variable ${x} is re-declared`);
        }
        return tcExpr(bound, stmt.expression)
            .map(_ => ({ bound: bound.add(x), all: all.add(x) }));
    }
    else if (stmt.kind === 'assignment') {
        const x = stmt.name;
        if (bound.contains(x) === false) {
            return result_1.error(`variable ${x} is not declared`);
        }
        return tcExpr(bound, stmt.expression).map(_ => env);
    }
    else if (stmt.kind === 'if') {
        return tcExpr(bound, stmt.test)
            .then(_ => tcBlock(env, stmt.truePart))
            .then(({ all }) => tcBlock({ bound, all }, stmt.falsePart))
            .map(({ all }) => ({ bound, all }));
    }
    else if (stmt.kind === 'while') {
        // NOTE(arjun): Same trick as above.
        return tcExpr(bound, stmt.test)
            .then(_ => tcBlock(env, stmt.body))
            .map(({ all }) => ({ bound, all }));
    }
    else if (stmt.kind === 'print') {
        return tcExpr(bound, stmt.expression)
            .map(_ => env);
    }
    else {
        return result_1.unreachable('unhandled case in tcStmt');
    }
}
/**
 * A very naive "type-checker", which only ensures that (1) variables are
 * declared before they are used and that (2) there are no pairs of let
 * statements in different scopes that declare two variables with the same name.
 */
function tc(stmts) {
    return tcBlock({ bound: immutable_1.Set.of(), all: immutable_1.Set.of() }, stmts)
        .map(_ => undefined);
}
exports.tc = tc;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi90cy90Yy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHlDQUFnQztBQUNoQyxxQ0FBMEQ7QUFDMUQsbUNBQW1DO0FBRW5DLFNBQVMsTUFBTSxDQUFDLFNBQXNCLEVBQUUsSUFBVTtJQUM5QyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQ3hCLE9BQU8sV0FBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ3hCO1NBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtRQUM5QixPQUFPLFdBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN4QjtTQUNJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7UUFDL0IsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQixPQUFPLFdBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN4QjthQUNJO1lBQ0QsT0FBTyxjQUFLLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxDQUFDO1NBQ3pEO0tBQ0o7U0FDSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUFFO1FBQy9CLE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDO2FBQzVCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDOUM7U0FDSTtRQUNELE9BQU8sb0JBQVcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0tBQ2xEO0FBQ0wsQ0FBQztBQVVELFNBQVMsT0FBTyxDQUFDLEdBQVEsRUFBRSxVQUFrQjtJQUN6QyxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNwRCxDQUFD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