export declare function unreachable(message: string): never;
export declare type Result<T> = {
    kind: 'ok';
    value: T;
    unsafeGet(): T;
    then<S>(other: (value: T) => Result<S>): Result<S>;
    map<S>(f: (value: T) => S): Result<S>;
} | {
    kind: 'error';
    message: string;
    unsafeGet(): T;
    then<S>(other: (value: T) => Result<S>): Result<S>;
    map<S>(f: (value: T) => S): Result<S>;
};
declare class OK<T> {
    value: T;
    kind: 'ok';
    constructor(value: T);
    unsafeGet(): T;
    then<S>(other: (value: T) => Result<S>): Result<S>;
    map<S>(f: (value: T) => S): Result<S>;
}
export declare function ok<T>(value: T): OK<T>;
export declare function error<T>(message: string): Result<T>;
export declare function foldLeft<S, T>(f: (acc: S, value: T) => Result<S>, init: S, array: T[]): Result<S>;
export {};
