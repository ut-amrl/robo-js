"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const babel = require("babel-core");
const t = require("babel-types");
var babelHelpers_1 = require("./babelHelpers");
exports.letExpression = babelHelpers_1.letExpression;
// Helper to generate tagging function for AST tags preserved between traversals.
function tag(tag, t, v) {
    const tagged = t;
    tagged[tag] = v;
    return tagged;
}
exports.tag = tag;
exports.breakLbl = (t, v) => tag('break_label', t, v);
exports.continueLbl = (t, v) => tag('continue_label', t, v);
exports.newTag = (t) => tag('new', t, true);
const containsCallVisitor = {
    FunctionExpression(path) {
        path.skip();
    },
    CallExpression(path) {
        this.containsCall = true;
        path.stop();
    },
    NewExpression(path) {
        this.containsCall = true;
        path.stop();
    },
};
/**
 * Traverses children of `path` and returns true if it contains any applications.
 */
function containsCall(path) {
    let o = { containsCall: false };
    path.traverse(containsCallVisitor, o);
    return o.containsCall;
}
exports.containsCall = containsCall;
/**
 * Use this when the contents of the body need to be flattened.
 * @param body An array of statements
 * @returns a new block (does not update the argument)
 */
function flatBodyStatement(body) {
    const newBody = [];
    body.forEach((elem) => {
        if (t.isBlockStatement(elem)) {
            elem.body.forEach((e) => {
                if (t.isStatement(e)) {
                    newBody.push(e);
                }
                else if (t.isEmptyStatement(e)) { }
                else {
                    throw new Error('Could not flatten body, element was not a statement');
                }
            });
        }
        else {
            newBody.push(elem);
        }
    });
    return t.blockStatement(newBody);
}
exports.flatBodyStatement = flatBodyStatement;
/**
 * A simple wrapper around Babel's `transformFromAst` function.
 */
function transformFromAst(path, plugins, ast = false, code = false) {
    const opts = {
        plugins: plugins,
        babelrc: false,
        code: false,
        ast: false,
    };
    return babel.transformFromAst(path.node, undefined, opts);
}
exports.transformFromAst = transformFromAst;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBb0M7QUFDcEMsaUNBQWlDO0FBRWpDLCtDQUErQztBQUF0Qyx1Q0FBQSxhQUFhLENBQUE7QUFLdEIsaUZBQWlGO0FBQ2pGLFNBQWdCLEdBQUcsQ0FBTyxHQUFXLEVBQUUsQ0FBSSxFQUFFLENBQUk7SUFJL0MsTUFBTSxNQUFNLEdBQVMsQ0FBQyxDQUFDO0lBQ3ZCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEIsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQVBELGtCQU9DO0FBY1ksUUFBQSxRQUFRLEdBQUcsQ0FBSSxDQUFJLEVBQUUsQ0FBZSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsRSxRQUFBLFdBQVcsR0FBRyxDQUFJLENBQUksRUFBRSxDQUFlLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEUsUUFBQSxNQUFNLEdBQUcsQ0FBSSxDQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRXZELE1BQU0sbUJBQW1CLEdBQUc7SUFDMUIsa0JBQWtCLENBQUMsSUFBb0M7UUFDckQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELGNBQWMsQ0FBQyxJQUFnQztRQUM1QyxJQUFZLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUNsQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQStCO1FBQzFDLElBQVksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDO0FBRUY7O0dBRUc7QUFDSCxTQUFnQixZQUFZLENBQUksSUFBaUI7SUFDL0MsSUFBSSxDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0QyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUM7QUFDeEIsQ0FBQztBQUpELG9DQUlDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLGlCQUFpQixDQUFDLElBQW1CO0lBQ25ELE1BQU0sT0FBTyxHQUFtQixFQUFFLENBQUM7SUFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ3BCLElBQUksQ0FBQyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUFFO3FCQUNyQyxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHO3FCQUFNO29CQUN2QyxNQUFNLElBQUksS0FBSyxDQUNiLHFEQUFxRCxDQUFDLENBQUM7aUJBQzFEO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjthQUFNO1lBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUFFO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFmRCw4Q0FlQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQzlCLElBQXNCLEVBQ3RCLE9BQWMsRUFDZCxHQUFHLEdBQUcsS0FBSyxFQUNYLElBQUksR0FBRyxLQUFLO0lBQ1osTUFBTSxJQUFJLEdBQTJCO1FBQ25DLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxHQUFHLEVBQUUsS0FBSztLQUNYLENBQUM7SUFDRixPQUFPLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1RCxDQUFDO0FBWkQsNENBWUMifQ==