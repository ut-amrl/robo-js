"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const t = require("babel-types");
function isFunWithBody(node) {
    return t.isFunctionDeclaration(node) || t.isFunctionExpression(node) ||
        t.isObjectMethod(node);
}
exports.isFunWithBody = isFunWithBody;
exports.eTrue = t.booleanLiteral(true);
exports.eFalse = t.booleanLiteral(false);
exports.eUndefined = t.identifier('undefined');
function enclosingScopeBlock(path) {
    const parent = path.getFunctionParent().node;
    if (t.isProgram(parent)) {
        return parent.body;
    }
    else if (t.isFunctionExpression(parent) ||
        t.isFunctionDeclaration(parent) ||
        t.isObjectMethod(parent)) {
        return parent.body.body;
    }
    else {
        throw new Error(`parent is a ${parent.type}`);
    }
}
exports.enclosingScopeBlock = enclosingScopeBlock;
/** Constructs an 'e1 && e2', but simplifies when either sub-expression is
 *  a literal.
 */
function and(e1, e2) {
    if ((e1.type === 'BooleanLiteral' && e1.value === true)) {
        return e2;
    }
    else if (e2.type === 'BooleanLiteral' && e2.value === true) {
        return e1;
    }
    else if ((e1.type === 'BooleanLiteral' && e1.value === false) ||
        (e2.type === 'BooleanLiteral' && e2.value === false)) {
        return exports.eFalse;
    }
    else {
        return t.logicalExpression('&&', e1, e2);
    }
}
exports.and = and;
/** Constructs an 'e1 || e2', but simplifies when either sub-expression is
 *  a literal.
 */
function or(...es) {
    let r = t.booleanLiteral(false);
    for (const e of es) {
        r = orBin(r, e);
    }
    return r;
}
exports.or = or;
function orBin(e1, e2) {
    if ((e1.type === 'BooleanLiteral' && e1.value === false)) {
        return e2;
    }
    else if (e2.type === 'BooleanLiteral' && e2.value === false) {
        return e1;
    }
    else if ((e1.type === 'BooleanLiteral' && e1.value === true) ||
        (e2.type === 'BooleanLiteral' && e2.value === true)) {
        return exports.eTrue;
    }
    else {
        return t.logicalExpression('||', e1, e2);
    }
}
function sIf(e, s1, s2) {
    if (s2 === undefined) {
        s2 = t.emptyStatement();
    }
    if (e.type === 'BooleanLiteral' && e.value === true) {
        return s1;
    }
    else if (e.type === 'BooleanLiteral' && e.value === false) {
        return s2;
    }
    else {
        if (t.isEmptyStatement(s2)) {
            return t.ifStatement(e, s1);
        }
        else {
            return t.ifStatement(e, s1, s2);
        }
    }
}
exports.sIf = sIf;
/**
 * Replaces a statement with a sequence of statements, creating a BlockStatement
 * if necessary.
 *
 * NOTE(arjun): There appears to be a bug with Babel's path.replaceWithMultiple
 * that this function works around. To witness the bug, try the ClojureScript
 * benchmarks using Babel's replaceWithMultiple instead of this function.
 *
 * @param path the path to a statement to replace
 * @param stmts a sequence of statements
 */
function replaceWithStatements(path, ...stmts) {
    if (path.parent.type === 'BlockStatement') {
        path.replaceWithMultiple(stmts);
    }
    else {
        path.replaceWith(t.blockStatement(stmts));
    }
}
exports.replaceWithStatements = replaceWithStatements;
/**
 * Given an 'LVal' that is an identifier, produces the identifier's name.
 * Throws an exception if the 'LVal' is not an identifier.
 *
 * @param lval an l-value
 * @returns the name of the identifier, if 'lval' is an identifier
 */
function lvaltoName(lval) {
    if (lval.type === 'Identifier') {
        return lval.name;
    }
    else if (lval.type === 'RestElement' && lval.argument.type === 'Identifier') {
        return lval.argument.name;
    }
    else {
        throw new Error(`Expected Identifier, received ${lval.type}`);
    }
}
exports.lvaltoName = lvaltoName;
function isPropertyValue(p) {
    return (t.isObjectMethod(p) ||
        (t.isObjectProperty(p) &&
            p.computed === false &&
            t.isExpression(p.value) &&
            isValue(p.value)));
}
/**
 * Produces 'true' if 'e' is a value.
 *
 * @param e
 */
function isValue(e) {
    if (e === null) {
        return false;
    }
    if (t.isLiteral(e) || t.isFunction(e) || t.isIdentifier(e)) {
        return true;
    }
    if (t.isArrayExpression(e)) {
        return e.elements.every(isValue);
    }
    if (t.isObjectExpression(e)) {
        return e.properties.every(isPropertyValue);
    }
    return false;
}
exports.isValue = isValue;
function arrayPrototypeSliceCall(e) {
    return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier('Array'), t.identifier('prototype')), t.identifier('slice')), t.identifier('call')), [e]);
}
exports.arrayPrototypeSliceCall = arrayPrototypeSliceCall;
function varDecl(x, init) {
    const id = typeof x === 'string' ? t.identifier(x) : x;
    return t.variableDeclaration('var', [t.variableDeclarator(id, init)]);
}
exports.varDecl = varDecl;
function enclosingFunctionName(path) {
    // TODO(arjun): this traversal is slow
    const f = path.getFunctionParent().node;
    if (t.isFunctionExpression(f)) {
        return f.originalName || f.id.name;
    }
    else if (t.isFunctionDeclaration(f)) {
        return f.id.name;
    }
    else {
        return;
    }
}
exports.enclosingFunctionName = enclosingFunctionName;
function returnLast(statements) {
    const N = statements.length - 1;
    const last = statements[N];
    if (t.isExpressionStatement(last)) {
        statements[N] = t.returnStatement(last.expression);
    }
    return statements;
}
exports.returnLast = returnLast;
function letExpression(name, value, kind = 'let') {
    return t.variableDeclaration(kind, [t.variableDeclarator(name, value)]);
}
exports.letExpression = letExpression;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFiZWxIZWxwZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMvYmFiZWxIZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQWlDO0FBS2pDLFNBQWdCLGFBQWEsQ0FBQyxJQUFZO0lBQ3hDLE9BQU8sQ0FBQyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUM7UUFDbEUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBSEQsc0NBR0M7QUFFWSxRQUFBLEtBQUssR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRS9CLFFBQUEsTUFBTSxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFakMsUUFBQSxVQUFVLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUVwRCxTQUFnQixtQkFBbUIsQ0FBQyxJQUFzQjtJQUN4RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDN0MsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQztLQUNwQjtTQUNJLElBQUksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztRQUM5QixDQUFDLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDO1FBQy9CLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDakMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztLQUN6QjtTQUNJO1FBQ0gsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQy9DO0FBQ0gsQ0FBQztBQWJELGtEQWFDO0FB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