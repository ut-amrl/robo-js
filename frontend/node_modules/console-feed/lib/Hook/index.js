"use strict";
exports.__esModule = true;
var Methods_1 = require("../definitions/Methods");
var parse_1 = require("./parse");
var Transform_1 = require("../Transform");
// import Construct from './construct'
/**
 * Hook a console constructor and forward messages to a callback
 * @argument console The Console constructor to Hook
 * @argument callback The callback to be called once a message is logged
 */
function Hook(console, callback) {
    var TargetConsole = console;
    var Storage = {
        pointers: {},
        src: {
            npm: 'https://npmjs.com/package/console-feed',
            github: 'https://github.com/samdenty99/console-feed'
        }
    };
    var _loop_1 = function (method) {
        var NativeMethod = TargetConsole[method];
        // Override
        TargetConsole[method] = function () {
            // Pass back to native method
            NativeMethod.apply(this, arguments);
            // Parse arguments and send to transport
            var args = [].slice.call(arguments);
            // setTimeout to prevent lag
            setTimeout(function () {
                var parsed = parse_1["default"](method, args);
                if (parsed) {
                    var encoded = Transform_1.Encode(parsed);
                    callback(encoded, parsed);
                }
            });
        };
        // Store native methods
        Storage.pointers[method] = NativeMethod;
    };
    // Override console methods
    for (var _i = 0, Methods_2 = Methods_1["default"]; _i < Methods_2.length; _i++) {
        var method = Methods_2[_i];
        _loop_1(method);
    }
    TargetConsole.feed = Storage;
    return TargetConsole;
}
exports["default"] = Hook;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvSG9vay9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU9BLGtEQUE0QztBQUU1QyxpQ0FBMkI7QUFFM0IsMENBQXFDO0FBQ3JDLHNDQUFzQztBQUV0Qzs7OztHQUlHO0FBQ0gsY0FBNkIsT0FBZ0IsRUFBRSxRQUFrQjtJQUMvRCxJQUFNLGFBQWEsR0FBRyxPQUF3QixDQUFBO0lBQzlDLElBQU0sT0FBTyxHQUFZO1FBQ3ZCLFFBQVEsRUFBRSxFQUNUO1FBQ0QsR0FBRyxFQUFFO1lBQ0gsR0FBRyxFQUFFLHdDQUF3QztZQUM3QyxNQUFNLEVBQUUsNENBQTRDO1NBQ3JEO0tBQ0YsQ0FBQTs0QkFHUSxNQUFNO1FBQ2IsSUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRTFDLFdBQVc7UUFDWCxhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUc7WUFDdEIsNkJBQTZCO1lBQzdCLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFBO1lBRW5DLHdDQUF3QztZQUN4QyxJQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUVyQyw0QkFBNEI7WUFDNUIsVUFBVSxDQUFDO2dCQUNULElBQU0sTUFBTSxHQUFHLGtCQUFLLENBQUMsTUFBd0IsRUFBRSxJQUFJLENBQUMsQ0FBQTtnQkFDcEQsSUFBSSxNQUFNLEVBQUU7b0JBQ1YsSUFBTSxPQUFPLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQVksQ0FBQTtvQkFDekMsUUFBUSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtpQkFDMUI7WUFDSCxDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQTtRQUVELHVCQUF1QjtRQUN2QixPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFlBQVksQ0FBQTtJQUN6QyxDQUFDO0lBeEJELDJCQUEyQjtJQUMzQixLQUFtQixVQUFPLEVBQVAsWUFBQSxvQkFBTyxFQUFQLHFCQUFPLEVBQVAsSUFBTztRQUFyQixJQUFJLE1BQU0sZ0JBQUE7Z0JBQU4sTUFBTTtLQXVCZDtJQUVELGFBQWEsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFBO0lBRTVCLE9BQU8sYUFBYSxDQUFBO0FBQ3RCLENBQUM7QUF4Q0QsMEJBd0NDIn0=